update.packages()
update.packages()
install.packages("moments")
install.packages("moments", dependencies = TRUE)
library(moments)
library(moments) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) deck.cards <- 52 deck.hand <- 5 deck.faces <- 13 options(digits = 13) choose.long <- function(n, k) { 	as.integer( factorial( n )/ ( factorial( k ) * factorial( n - k ) ) ) } short <- choose(deck.cards, deck.hand) long <- choose.long(deck.cards, deck.hand) stopifnot(short == long) # 4 of same card (aces, for example) = # 52 cards, take 4 we need (aces), + *any* 1 additional resulting card to fill the hand. prob.card <- ( deck.cards - ( deck.hand - 1 ) ) / choose(deck.cards, deck.hand) round(prob.card * 100, 4) # 4 of a kind (same face) # 13 faces, 1 way to get it to be all the same. prob.kind <- ( deck.faces * deck.cards - ( deck.hand - 1 ) ) / choose(deck.cards, deck.hand) round(prob.kind * 100, 4) # single pair in a 5 card hand # prob pair = 13, 4 choose 2 ways of picking the pair, 13 choose 2 for picking the non-pair, 4^3 ways of choosing from non-pair faces prob.onepair <- deck.faces * choose(4, 2) * choose(12, 3) * 4 ^ 3 / choose(deck.cards, deck.hand) round(prob * 100, 2) # Annualized historic volatility from a time series (1 yr, monthly) S = c(1.3, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.4, 1.5) volatility <- function( R ) { 	diffLogR <- diff( log( R ) )  	diffLogRmean <- mean(diffLogR) 	N = length(diffLogR) 	histVol = sqrt(1 / (N - 1) * sum((diffLogR - diffLogRmean) ^ 2)) 	annHistVol = histVol * sqrt(length(R)) 	annHistVol } volatility(S)
library(moments) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) deck.cards <- 52 deck.hand <- 5 deck.faces <- 13 options(digits = 13) choose.long <- function(n, k) { 	as.integer( factorial( n )/ ( factorial( k ) * factorial( n - k ) ) ) } short <- choose(deck.cards, deck.hand) long <- choose.long(deck.cards, deck.hand) stopifnot(short == long) # 4 of same card (aces, for example) = # 52 cards, take 4 we need (aces), + *any* 1 additional resulting card to fill the hand. prob.card <- ( deck.cards - ( deck.hand - 1 ) ) / choose(deck.cards, deck.hand) round(prob.card * 100, 4) # 4 of a kind (same face) # 13 faces, 1 way to get it to be all the same. prob.kind <- ( deck.faces * deck.cards - ( deck.hand - 1 ) ) / choose(deck.cards, deck.hand) round(prob.kind * 100, 4) # single pair in a 5 card hand # prob pair = 13, 4 choose 2 ways of picking the pair, 13 choose 2 for picking the non-pair, 4^3 ways of choosing from non-pair faces prob.onepair <- deck.faces * choose(4, 2) * choose(12, 3) * 4 ^ 3 / choose(deck.cards, deck.hand) round(prob.onepair * 100, 2) # Annualized historic volatility from a time series (1 yr, monthly) S = c(1.3, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.4, 1.5) volatility <- function( R ) { 	diffLogR <- diff( log( R ) )  	diffLogRmean <- mean(diffLogR) 	N = length(diffLogR) 	histVol = sqrt(1 / (N - 1) * sum((diffLogR - diffLogRmean) ^ 2)) 	annHistVol = histVol * sqrt(length(R)) 	annHistVol } volatility(S)
library(moments)
skewness(S)
kurtosis(X)
kurtosis(S)
kurtosis(S)
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = ""))
install.packages("data.table")
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = ""))
install.packages("data.table")
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = ""))
install.packages("foreign")
require(foreign)
require(foreign)
install.packages("foreign")
library(foreign)
require(data.table)
library(foreign)
.libPaths(c(.libPaths(), "~/userLibrary"))
.libPaths()
.libPaths()
dest <- .libPaths()
install.packages("data.table", lib = .libPaths(), dependencies = TRUE)
library(zoo)
install.packages("foreign", lib = .libPaths(), dependencies = TRUE)
library(foreign)
install.packages("foreign", lib = .libPaths(), dependencies = TRUE)
library(foreign)
install.packages("foreign", destdir = = .libPaths(), dependencies = TRUE)
install.packages("foreign", destdir = .libPaths(), dependencies = TRUE)
install.packages("foreign", destdir = .libPaths(), dependencies = TRUE)install.packages("foreign", destdir = .libPaths(), dependencies = TRUE)
install.packages("foreign", destdir = .libPaths(), dependencies = TRUE)
install.packages("data.table", destdir = .libPaths(), dependencies = TRUE)
install.packages("data.table", lib = .libPaths(), dependencies = TRUE)
library(foreign)
library(foreign)
installed.packages()
version()
version
.libPaths()
install.packages("data.table", , dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("foreign", dependencies = TRUE)
library(foreign)
homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = ""))
version()
version
read.dta
funda <- read.dta("funda.dta")
msft <- read.dta("msf.dat")
msft <- read.dta("msf.dta")
data.file <- read.dta("funda.dta")
rm(funda)
rm(msft)
loadDtaFile(sqlConnection, "funda.dta", "funda")
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; User Id=bmoretz; Password=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta("funda.dta") 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; uid=bmoretz; Password=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta("funda.dta") 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; uid=bmoretz; Password=letmein;";
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta("funda.dta") 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta("funda.dta") 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
msf <- read.dta("msf.dta")
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta(fileName) 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; sqlReturnData <- RxSqlServerData( 	connectionString = sqlConnection, 	sqlQuery = sprintf(' 		SELECT 			[tsymbol], 			[ret] 		FROM 			dbo.[msf] 		WHERE 			[date] BETWEEN \'%s\' AND \'%s\'  			AND 			[tsymbol] in (\'%s\', \'%s\' ) 	;', '2005-01-01', '2013-12-31', 'AAPL', 'SPY'), 	stringsAsFactors = FALSE, 	useFastRead = TRUE ) raw.data <- as.data.table(rxImport(sqlReturnData, overwrite = TRUE, stringsAsFactors = FALSE))
y <- raw.data[ raw.data$tsymbol == 'AAPL', ]$ret
x <- raw.data[raw.data$tsymbol == 'SPY',]$ret
cov(x, y) / var(x)
beta <- cov(x, y) / var(x)
summary(lm(y ~ x + 1))
cov(x, y) / var(x)
summary(lm(y ~ x + 1))
shapiro.test(x)
shapiro.test(y)
plot(x,y)
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; sqlReturnData <- RxSqlServerData( 	connectionString = sqlConnection, 	sqlQuery = sprintf(' 		SELECT 			[tsymbol], 			[ret] 		FROM 			dbo.[msf] 		WHERE 			[date] BETWEEN \'%s\' AND \'%s\'  			AND 			[tsymbol] in (\'%s\', \'%s\' ) 	;', '2005-01-01', '2013-12-31', 'AAPL', 'SPY'), 	stringsAsFactors = FALSE, 	useFastRead = TRUE ) raw.data <- as.data.table(rxImport(sqlReturnData, overwrite = TRUE, stringsAsFactors = FALSE)) y <- raw.data[raw.data$tsymbol == 'AAPL',]$ret x <- raw.data[raw.data$tsymbol == 'SPY',]$ret beta_ratio <- cov(x, y) / var(x) beta_lm <- summary(lm(y ~ x + 1)) shapiro.test(x) shapiro.test(y) plot(x,y)
dt <- read.csv("dt.csv")
getwd()
getwd()
data.file.path <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table")
dt <- read.csv(data.file.path)
dt <- read.csv(data.file.path)
dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table")
setwd(dt.wd)
dt <- read.csv("dt.csv")
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd) DT <- as.data.table( read.csv("dt.csv") )
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd) DT <- as.data.table( read.csv("dt.csv") )
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd)
# load DT DT <- as.data.table( read.csv("dt.csv") )
# Sum of all columns and the number of rows
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
colnames(DT)
DT <- as.data.table( read.csv("dt.csv") )
setNames(DT, c("x", "y", "z") DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
DT <- as.data.table( read.csv("dt.csv") )
setNames(DT, c("x", "y", "z"))
# Sum of all columns and the number of rows
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
DT
t <- read.csv("dt.csv")
t <- read.csv("dt.csv", make.names = FALSE)
t <- read.csv("dt.csv", make.names = TRUE)
t <- read.csv("dt.csv", header = TRUE)
t <- read.csv("dt.csv", header = TRUE, col.names = c("x","y","z") DT <- as.data.table( read.csv("dt.csv", header = TRUE) ) DT <- as.data.table( read.csv("dt.csv", header = TRUE) )
DT <- as.data.table( read.csv("dt.csv", header = TRUE) )
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
setNames(DT, c("x", "y", "z"))
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, lapply(.SD, cumsum), by1 = x, .SDcols = c("x", "y", "z")]
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd)
# load DT DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z"))) setNames(DT, c("x", "y", "z"))
DT # spot check
# Sum of all columns and the number of rows
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd)
# load DT DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
# Sum of all columns and the number of rows
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, c.( lapply(.SD, cumsum), .N) , by1 = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, c.( lapply(.SD, cumsum), .N) , by = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, c( lapply(.SD, cumsum), .N) , by = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y", "z")]
DT[, c(z > 8, lapply(.SD, cumsum)), by = x, .SDcols = c("x", "y", "z")]
DT[, c(by1 = z > 8, lapply(.SD, cumsum)), by = x, .SDcols = c("x", "y", "z")]
DT[, z > 8,][, c(lapply(.SD, cumsum)), by = x, .SDcols = c("x", "y", "z")]
DT[, z > 8,][, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y", "z")]
DT[, z > 8,]
DT[ DT[, z > 8,] ]
DT[, .( g := z > 8),]
DT[, .(g := z > 8),]
DT[, z > 8,][, lapply(.SD, cumsum), by = by1 = x, .SDcols = c("x", "y", "z")]
DT[, lapply(.SD, cumsum), by = by1 = x, .SDcols = c("x", "y", "z")]
DT[, lapply(.SD, cumsum), by = c(by1 = x), .SDcols = c("x", "y", "z")]
DT[, lapply(.SD, cumsum), by = c(by1 = x), .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y")]
DT
DT[, lapply(.SD, cumsum), by = z, .SDcols = c("x", "y")]
DT[, c.( lapply(.SD, cumsum) ), by = z, .SDcols = c("x", "y")]
DT[, c( lapply(.SD, cumsum) ), by = z, .SDcols = c("x", "y")]
DT[, c( lapply(.SD, cumsum) ), by = z, .SDcols = c("x", "y")]
DT[, c( lapply(.SD, cumsum) ), by = x, .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by1 = x, .SDcols = c("x", "y")]
DT[, z > 8]
DT[, z > 8,]
DT[, z > 8]
DT[ DT[, z > 8] ]
DT[DT[, z > 8]][, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y")]
DT[, , by = c(x, z > 8 )]
DT[, , by = list(x, z > 8 )]
DT[, by1 = z > 8,]
DT[, by1 := z > 8,]
DT[, by1 := z > 8,]
DT
DT[, c( by1 = x, by1 := z > 8 ),]
DT[, c( by1 := x, by1 := z > 8 ),]
DT[, c( by1 = x, by1 = z > 8 ),]
DT[, by1 := z > 8, by = x]
DT
DT[, by1 := z > 8,][, lapply(.SD, cumsum), by = c(x, by1), .SDcols = c("x", "y")]
DT[, by1 := z > 8,][, lapply(.SD, cumsum), by = c(x, by1), .SDcols = c("x", "y")]
DT[, by1 := z > 8,][, lapply(.SD, cumsum), by = c("x", "by1"), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("x", "by1") ), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("by1", "by2") ), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("by1", "by2") ), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")]
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")]
DT
DT[, by2 := z > 8,][, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, .( by1 = x, lapply(.SD, cumsum) ), by = c("x", "by2"), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2)]
DT[, by2 := z > 8,][, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
DT[, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, c( by2 = x > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")]
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")]
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "z") ), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, lapply(.SD, cumsum), by = .(x, z > 8)]
DT[, lapply(.SD, cumsum), by = .(x, z > 8), .SDcols = c("x","y")]
DT[, lapply(.SD, cumsum), by = .(x, z > 8), .SDcols = c("x", "y")][, .(by1 = x, by2, x, y)]
DT[, lapply(.SD, cumsum), by = .(x, z > 8), .SDcols = c("x", "y")][, .(by1 = x, by2 = z, x, y)]
DT[, lapply(.SD, cumsum), by = .(x, by2 = z > 8), .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by = .(by1 = x, by2 = z > 8), .SDcols = c("x", "y")]
require(data.table)
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
DT[, Total := sum(B) ,]
DT[, Total := sum(B) ,]
DT
DT[, B := B + 1,]
DT[2:4, Total2 := sum(B), by = A]
DT
DT[, Total := NULL, ]
DT[, Total := NULL, ]
DT[[3]]
require(data.table) DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5) # Add column by reference: Total
DT[, Total := sum(B), by = A]
# Add 1 to column B
DT[, B := B + 1,]
# Add a new column Total2
DT[2:4, Total2 := sum(B), by = A]
# Remove the Total column
DT[, Total := NULL, ]
# Select the third column using `[[`
DT[[3]]
DT
DT
DT[2:3, B := NULL ]
DT[2:3, B := NULL,]
DT <- data.table(A = c(1, 1, 1, 2, 2), B = 1:5)
DT[, ':='(B = B + 1L, C = A + B, D = 2)]
DT[, my_cols := NULL,]
DT[, .(my_cols := NULL),]
DT[, my_cols := NULL,]
DT[my_cols := NULL]
DT[,my_cols := NULL,]
DT[, B := NULL,]
DT[, ':='(B = B + 1L, C = A + B, D = 2)]
DT <- data.table(A = c(1, 1, 1, 2, 2), B = 1:5)
DT[, ':='(B = B + 1L, C = A + B, D = 2)]
DT[, ':='(my_cols) = NULL,]
DT[, ':='my_cols = NULL,]
DT[, .(my_cols = NULL),]
DT[, .(my_cols = NULL),]
DT[, .(my_cols := NULL),]
DT[ 3 := NULL ]
DT[ DT[,my_cols,] ]
DT[,my_cols,]
my_cols <- c("B", "C")
DT[, .(my_cols := NULL),]
DT[, my_cols := NULL,]
DT[ DT[,my_cols,] ]
DT[[3]] = NULL
DT <- data.table(A = c(1, 1, 1, 2, 2), B = 1:5)
DT[, ':='(B = B + 1L, C = A + B, D = 2)]
# Delete my_cols
my_cols <- c("B", "C")
DT[, my_cols := NULL,]
DT[, .(my_cols := NULL),]
DT[, paste(my_cols) := NULL,]
DT[[2]] = NULL
rep(1,4)
rep(1:3,4)
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd) # load DT DT <- as.data.table(read.csv("dt.csv", header = TRUE))
DT
DT <- as.data.table(read.csv("dt.csv", header = TRUE, check.names = FALSE))
DT
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd) # load DT DT <- as.data.table(read.csv("dt.csv", header = TRUE, check.names = TRUE)) DT
read.csv("dt.csv", header = TRUE, check.names = TRUE)
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE))
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE))
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE))
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE))
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE, stringsAsFactors = FALSE))
read.csv("dt_2.csv", header = TRUE, check.names = TRUE, stringsAsFactors = FALSE)
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE, stringsAsFactors = FALSE))
DT[X := NULL]
DT[,X := NULL,]
 DT
# Set the seed
set.seed(1)
rnorm(3)
sample(1:3)
sample(1:3)
sample(1:10)
sample(1:length(DT))
for (i in 2:4)
	set(DT, i, sample(1:length(DT[[i]])), NA) 		DT
length(DT[[2]]))
DT[[2]]
length(DT[[2]])
for (i in 2:4)
	set(DT, i, sample(1:length(DT[[2]])), NA)
for (i in 2:4)
	set(DT, i, sample(1:10), NA)
for (i in 2:4)
	set(DT, sample(1:length(DT[[2]])), i, NA) 		DT
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE, stringsAsFactors = FALSE)) DT[, X := NULL,] # For loop with set # Loop through columns 2, 3, and 4, and for each one, select 3 rows at random and set the value of that column to NA. for (i in 2:4)
	set(DT, sample(1:3, length(DT[[2]])), i, NA) 		DT
sample(1:3, 10)
sample(10)
sample(10,3)
for (i in 2:4)
	set(DT, sample(10, 3), i, NA) DT
setnames(DT, tolower)
setnames(DT, tolower(colnames(DT)))
DT
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
paste0(colnames(DT),"_2")
setnames(DT, paste0(colnames(DT),"_2"))
colnames(DT)[1] <- "A2"
colnames(DT) <- rev(colnames(DT))
colnames(DT)[1,] <- "A2"
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
setnames(DT, paste0(colnames(DT),"_2"))
colnames(DT)[1] <- "A2"
colnames(DT) <- rev(colnames(DT))
# Define DT
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
# Add a suffix "_2" to all column names
setnames(DT, paste0(colnames(DT),"_2"))
# Change column name "a_2" to "A2"
colnames(DT)[1] <- "A2"
setorder(DT, rev(colnames(DT)))
setorder(DT, rev(colnames(DT)))
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
# Add a suffix "_2" to all column names
setnames(DT, paste0(colnames(DT),"_2"))
# Change column name "a_2" to "A2"
colnames(DT)[1] <- "A2"
# Reverse the order of the columns
setorder(DT, rev(colnames(DT)))
rev(colnames(DT))
setcolorder(DT, rev(colnames(DT)))
# Define DT DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1) # Add a suffix "_2" to all column names setnames(DT, paste0(colnames(DT), "_2")) # Change column name "a_2" to "A2" colnames(DT)[1] <- "A2" # Reverse the order of the columns setcolorder(DT, rev(colnames(DT)))
library(data.table)
# The 'keyed' data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
				 B = c(5, 4, 1, 9, 8, 8, 6),
				 C = 6:12)
setkey(DT, A, B)
# Select the "b" group
DT["b",]
# "b" and "c" groups
DT[c("b","c")]
# The first row of the "b" and "c" groups
# First and last row of the "b" and "c" groups
# Copy and extend code for instruction 4: add printout
DT[1,c("b","c")]
DT[,c("b","c")]
DT[c("b","c")]
DT[c("b","c"),1]
DT[c("b","c")][1]
DT[c("b", "c")][1:N]
DT[c("b","c")]
DT[c("b","c")]
DT[c("b","c")]
DT[c("b","c")]
DT[c("b","c"), by = EACHI]
DT[c("b","c"), mult = "first"]
DT[c("b", "c"), mult = c("first", "last")]
DT[c("b", "c"), mult %in% c("first", "last")]
DT[c("b", "c"), mult %in% c("first", "last")]
DT[c("b", "c"), mult = c("first", "last")]
DT[c("b", "c"), mult = "last"]
DT[c("b", "c")][, mult = "last"]
DT[c("b", "c")][, mult = "first"][, mult = "last"]
DT[c("b", "c"), by = .EACHI]
DT[c("b", "c"), .N, by = .EACHI]
DT[c("b", "c"), 1:.N, by = .EACHI]
# The first row of the "b" and "c" groups
DT[c("b","c"), mult = "first"]
# First and last row of the "b" and "c" groups
DT[c("b", "c"), 1, by = .EACHI]
# The first row of the "b" and "c" groups
DT[c("b","c"), mult = "first"]
# First and last row of the "b" and "c" groups
DT[ DT[c("b", "c"), 1, by = .EACHI] ]
DT[ DT[c("b", "c"), 1:N, by = .EACHI] ]
DT[ DT[c("b", "c"), 1:.N, by = .EACHI] ]
DT[ DT[c("b", "c"), .N, by = .EACHI] ]
DT[ DT[c("b", "c"), 1:3, by = .EACHI] ]
DT[c("b","c"), mult = "first"]
DT[ DT[c("b", "c"), 1, by = .EACHI] ]
print("")
DT[c("b","c"), mult = "first"]
print("")
DT[ DT[c("b", "c"), 1, by = .EACHI] ]
DT[ DT[c("b", "c"), .N = 1, by = .EACHI] ]
DT[ DT[c("b", "c"), .N == 1, by = .EACHI] ]
DT[c("b", "c"), .N == 1, by = .EACHI]
DT[ DT[c("b", "c"), .N == 1, by = .EACHI] ]
DT[ DT[c("b", "c"), .N, by = .EACHI] ]
DT
DT[c("b","c")]
DT[ DT[c("b", "c"), .N, by = .EACHI] ]
DT[c("b","c"), mult = "first"]
DT[ DT[c("b", "c"), .N, by = .EACHI] ]
DT[c("b", "c"), .N, by = .EACHI]
DT[, lapply(.SD, sum), by = .EACHI, .SDCols = c("b", "c")]
DT[, lapply(.SD, sum), by = .EACHI, .SDcols = c("b", "c")]
DT[, lapply(.SD, sum), by = .EACHI, .SDcols = b:c]
DT
DT[, lapply(.SD, sum), by = .EACHI, .SDcols = B:C]
DT[, .SD = 1:.N, by = .EACHI, .SDcols = B:C]
DT[, .SD, by = .EACHI, .SDcols = B:C]
DT[ .SD, by = .EACHI, .SDcols = B:C]
DT[, .SD, by = .EACHI, .SDcols = B:C]
X = data.table(x = c(1, 1, 1, 2, 2, 5, 6), y = 1:7, key = "x") Y = data.table(x = c(2, 6), z = letters[2:1], key = "x")
X[Y]
X
Y
X[Y]
X[Y, .N] # count of matches
X[Y, .N, by = .EACHI] # count of matches, explicit
X[Y, .N, by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = sum(.N), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = lapply(.N, sum), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = lapply(.N, sum), Group = .N, .I), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = lapply(.I, sum), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = lapply(.I, count), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = distinct(.I), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = unique(.I), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = sum(.I), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = nrow(.I), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = sum(.I >= 0 ), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Total = sum(.I > 0 ), Group = .N), by = .EACHI] # count of group (EACHI) matches, explicit
X[Y, list( Group = .N), by = .EACHI][, list( Total = sum(group), Group )]  # count of group (EACHI) matches, explicit
X[Y, list( Group = .N), by = .EACHI][, list( Total = sum(group), .Group )]  # count of group (EACHI) matches, explicit
X[Y, list( Group = .N), by = .EACHI][, list( Total = sum(group), Group )]  # count of group (EACHI) matches, explicit
X[Y, list( Group = .N), by = .EACHI]
X[Y, list( Group = .N), by = .EACHI][, list( Total = sum(Group), Group )]  # count of group (EACHI) matches, explicit
X[Y, list( Group = .N), by = .EACHI][, list( x, Total = sum(Group), Group )]  # count of group (EACHI) matches, explicit
X[Y, list(GroupTotal = .N), by = .EACHI][, list(x, GroupTotal, GrandTotal = sum(Group))] # count of group (EACHI) matches, explicit
X[Y, list(GroupTotal = .N), by = .EACHI][, list(x, GroupTotal, GrandTotal = sum(GroupTotal))] # count of group (EACHI) matches, explicit
X[Y, list(Group = .N), by = .EACHI][, list( X = x, Group, total = sum(Group))] # count of group (EACHI) matches, explicit
DT[c("b","c"), .SD, by = .EACHI]
DT[c("b","c"), list( N = .N, SD = .SD ), by = .EACHI]
DT[c("b","c"), list( N := .N, SD := .SD ), by = .EACHI]
DT[c("b","c"), .N, by = .EACHI]
DT[c("b","c"), .SD, by = .EACHI]
DT[c("b","c"), by = .EACHI, .SDcols = B:C]
DT[,, by = .EACHI, .SDcols = B:C]
DT[,.N, by = .EACHI, .SDcols = B:C]
DT[,.SD, by = .EACHI, .SDcols = B:C]
DT[c("b","c"), lapply(.SD, sum), by = .EACHI, .SDcols = B:C]
DT[c("b", "c"), .SD, by = .EACHI, .SDcols = B:C]
DT[c("b", "c"), list( B, C, N = .SD ), by = .EACHI, .SDcols = B:C]
DT[, list( B, C, N = .SD ), by = .EACHI, .SDcols = B:C]
DT[, list( B, C, N := .SD ), by = .EACHI, .SDcols = B:C]
DT[.SD, , by = .EACHI]
DT[, .SD, by = .EACHI]
set.seed(10238) DT <- data.table(A = rep(1:3, each = 5), B = rep(1:5, 3), 				 C = sample(15), D = sample(15)) DT
DT[, lapply(.SD, sum)]
DT[, lapply(.SD, sum), by = A]
DT[, lapply(.SD, sum), .SDcols = !"A"]
DT[, lapply(.SD, sum), by = B, .SDcols = !"A"]
DT[, lapply(.SD, sum), by = .EACHI, .SDcols = B:C]
DT[, lapply(.SD, sum), 'by' = .EACHI, .SDcols = B:C]
DT[, lapply(.SD, sum), by= EACHI, .SDcols = B:C]
library(data.table)
# The 'keyed' data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
				 B = c(5, 4, 1, 9, 8, 8, 6),
				 C = 6:12)
setkey(DT, A, B)
# First and last row of the "b" and "c" groups (Use by = .EACHI and .SD to select the first and last row of the "b" and "c" groups.)
DT[, lapply(.SD, sum), by= .EACHI, .SDcols = B:C]
# The first row of the "b" and "c" groups (Select the first row of the "b" and "c" groups using mult.)
DT[c("b","c"), mult = "first"]
# First and last row of the "b" and "c" groups (Use by = .EACHI and .SD to select the first and last row of the "b" and "c" groups.)
DT[, lapply(.SD, sum), by= .EACHI, .SDcols = B:C]
DT[, lapply(.SD, sum), by = B, .SDcols = !"A"]
DT[, lapply(.SD, sum), by= A, .SDcols = B:C]
DT[c("b","c"), mult = "first"]
DT[, lapply(.SD, sum), by= A, .SDcols = A]
DT[, lapply(.SD, sum), by= A, .SDcols = B:C]
DT[, lapply(.SD, first), by= A, .SDcols = B:C]
DT[, lapply(.SD, sum), by= A, .SDcols = B:C]
DT[, .SD, by= A, .SDcols = B:C]
DT[, A := .SD, by= A, .SDcols = B:C]
DT[, A := min(.SD), by= A, .SDcols = B:C]
DT[, A := lapply(.SD,print), by= A, .SDcols = B:C]
DT[, lapply(.SD,print), by= A, .SDcols = B:C]
DT[, lapply(.SD,FUN = function(x){print(x)}), by= A, .SDcols = B:C]
DT[, lapply(.SD,FUN = function(x){print(x)}), by= A, .SDcols = B:C]
DT[, lapply(.SD,sum), by= A, .SDcols = B:C]
DT[, .SD[, sum], by= A, .SDcols = B:C]
DT[, .SD[, sum(B)], by= A, .SDcols = B:C]
DT[, .SD[, which(.N == 1)], by= A, .SDcols = B:C]
DT[, .SD[, which(.N = 1)], by= A, .SDcols = B:C]
DT[, .SD[which(.N == 1)], by= A, .SDcols = B:C]
DT[, .SD[.N == 1], by= A, .SDcols = B:C]
DT[, .SD[1:.N], by= A, .SDcols = B:C]
DT[, .SD[which(.I == 1)], by= A, .SDcols = B:C]
DT[, .SD[,which(.I == 1)], by= A, .SDcols = B:C]
DT[, .SD[which(.I == 1)], by= A, .SDcols = B:C]
DT[, .SD[.I == 1], by= A, .SDcols = B:C]
DT[, .SD[.N == 1], by= A, .SDcols = B:C]
DT[, .SD[.I == 1], by= A, .SDcols = B:C]
DT[, .SD[.I == 1 | .I = .N], by= A, .SDcols = B:C]
DT[, .SD[.I == 1 || .I = .N], by= A, .SDcols = B:C]
DT[, .SD[.I == 1 || .I == .N], by= A, .SDcols = B:C]
# The first row of the "b" and "c" groups (Select the first row of the "b" and "c" groups using mult.)
DT[c("b","c"), mult = "first"]
DT[, .SD[.I == 1 | .I == .N], by= A, .SDcols = B:C]
DT[c("b","c"), .SD[.I == 1 | .I == .N], by= A, .SDcols = B:C]
DT[, .SD[.I == 1 | .I == .N], by= A, .SDcols = B:C]
DT[, .SD[.I == 1 || .I == .N], by= A, .SDcols = B:C]
DT[, .SD[.I == 1 || .I == .N], by= .EACHI, .SDcols = B:C]
DT[, .SD[.I == 1 || .I == .N], by= .EACHI, .SDcols = B:C, mult = "all"]
DT[, .SD[.I == 1 || .I == .N], by= A, .SDcols = B:C]
DT[, .SD[,by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[, .N == 1,,by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[, .N == 1,by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[, .N == 1, by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[, , by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[, .N == 1, by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[ .N == 1, by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[, 1:2, by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[1:2,, by = .EACHI], by= A, .SDcols = B:C]
DT[, .SD[.I:.N], by= A, .SDcols = B:C]
DT[, .SD[.I:.N], by= A, .SDcols = B:C]
DT[, .SD[.N], by= A, .SDcols = B:C]
DT[, .SD[1 OR .N], by= A, .SDcols = B:C]
DT[, .SD[1 || .N], by= A, .SDcols = B:C]
DT[, .SD[1 | .N], by= A, .SDcols = B:C]
DT[, .SD[.N == 1 | .N == .N], by= A, .SDcols = B:C]
DT[, .SD[.N], by= A, .SDcols = B:C]
DT[, .SD[.N], by= A, .SDcols = B:C]
DT[, .SD[,.N, by = .EACHI], by= A, .SDcols = B:C]
DT[, , by= A, .SDcols = B:C]
DT[, , by= A, .SDcols = B:C][, .N, by = .EACHI]
DT[, .N == nrow(.SD), by= A, .SDcols = B:C]
DT[, .SD[.N == nrow(.SD)], by= A, .SDcols = B:C]
DT[, .SD[.I == nrow(.SD)], by= A, .SDcols = B:C]
DT[, .SD[.N == nrow(.SD)], by= A, .SDcols = B:C]
DT[, .SD[.N == 1], by= A, .SDcols = B:C]
DT[, .SD[,.N == 1], by= A, .SDcols = B:C]
DT[, .SD[.N == 1], by= A, .SDcols = B:C]
DT[, .SD[.N], by= A, .SDcols = B:C]
DT[, C := .SD[.N], by= A, .SDcols = B:C]
DT[, C := .SD[.N], by= A, .SDcols = B:C]
DT[, Ct := .SD[.N], by= A, .SDcols = B:C]
DT[, Ct := .SD[.N], by= A, .SDcols = B:C]
DT[, Ct := .SD[.N], by= A, .SDcols = B:C]
DT[, (Ct := .SD[.N]), by= A, .SDcols = B:C]
DT[, (Ct = .SD[.N]), by= A, .SDcols = B:C]
DT[, .SD[.N], by= A, .SDcols = B:C]
DT[, .SD[xor(1, .N)], by = A, .SDcols = B:C]
DT[, .SD[xor(.N == 1, .N)], by = A, .SDcols = B:C]
DT[, .SD[xor(.N == 1, .N == .N)], by = A, .SDcols = B:C]
DT[, .SD[or(.N == 1, .N == .N)], by = A, .SDcols = B:C]
DT[, .SD[.N == 1 | .N], by = A, .SDcols = B:C]
DT[, .SD[1 | .N], by = A, .SDcols = B:C]
DT[, .SD[1 || .N], by = A, .SDcols = B:C]
DT[, .SD[1 | .N], by = A, .SDcols = B:C]
DT[, .SD[.N], by = A, .SDcols = B:C]
DT[, .SD[.N] | .SD[1], by = A, .SDcols = B:C]
DT[, .SD[.N] || .SD[1], by = A, .SDcols = B:C]
DT[, .SD[length(.SD)], by = A, .SDcols = B:C]
DT[, .SD[length(.SD), by = .EACHI], by = A, .SDcols = B:C]
DT[, .SD[,length(.SD), by = .EACHI], by = A, .SDcols = B:C]
DT[, .SD[, .SD == length(.SD), by = .EACHI], by = A, .SDcols = B:C]
DT[, .SD[.N], by = A, .SDcols = B:C]
DT[, { .SD[.N]; print(.N) }, by = A, .SDcols = B:C]
DT[, { print(.N) ; .SD[.N] }, by = A, .SDcols = B:C]
DT[, { print(.N) ; .SD[.N] }, by = A, .SDcols = B:C]
DT[, { print(.SD) ; .SD[.N] }, by = A, .SDcols = B:C]
DT[, { print(.SD) ; .SD[1|.N] }, by = A, .SDcols = B:C]
DT[, { print(.SD) ; .SD[c(1, .N)] }, by = A, .SDcols = B:C]
DT[, .SD[c(1, .N)], by = A, .SDcols = B:C]
# Copy and extend code for instruction 4: add printout
DT[, { print(.SD); .SD[c(1, .N)] }, by = A, .SDcols = B:C]
# First and last row of the "b" and "c" groups (Use by = .EACHI and .SD to select the first and last row of the "b" and "c" groups.)
DT[c("b","c"), .SD[c(1, .N)], by = A, .SDcols = B:C]
# Copy and extend code for instruction 4: add printout
DT[c("b", "c"), { print(.SD); .SD[c(1, .N)] }, by = A, .SDcols = B:C]
# The 'keyed' data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
				 B = c(5, 4, 1, 9, 8, 8, 6),
				 C = 6:12)
setkey(DT, A, B)
DT
DT[,.(B,4)]
DT[,.(B,4),]
DT[,.("b",4),]
DT[,.("b",4)]
DT[.("b",4)]
DT[.("b",4)]
DT[.("b",4), roll = TRUE]
DT[.("b", 4), roll = TRUE]
DT[.("b",4), roll = nearest]
DT[.("b",4), roll = "nearest"]
DT[.("b",4), roll = "nearest"]
DT[.("b",4), roll = -Inf]
DT[.("b", 4), roll = Inf]
DT[.("b", 4), roll = -Inf]
DT[.("b", 4), roll = Inf]
DT[.("b",4), roll = -2]
DT[.("b",4), roll = -1]
DT[.("b",4), roll = -2]
DT[.("b",4), roll = -1]
DT[.("b",3), roll = -1]
DT[.("b",3), roll = -2]
DT[.("b",3), roll = -1]
DT[.("b",3), roll = -1]
DT[.("b", 4), roll = -1]
DT[.("b", 4), roll = 1]
DT[.("b", 3), roll = 1]
DT[.("b", 3), roll = 2]
DT[.("b", 7:8), roll = 2, limit = TRUE]
DT[.("b", 7:8), roll = 2, rollends = TRUE]
DT[.("b", 3), roll = 2]
DT[.("b", 3), roll = 1]
DT[.("b", 3), roll = -1]
DT[.("b", 2), roll = -1]
DT[.("b", 1), roll = -1]
DT[.("b", 2), roll = -1]
DT[.("b", 2), roll = 2]
DT[.("b", 2), roll = 1]
DT[.("b", 2), roll = 1]
DT[.("b",3), roll = -1]
DT[.("b", 7:8), roll = 2, rollends = TRUE]
# Keyed data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
				 B = c(5, 4, 1, 9, 8, 8, 6),
				 C = 6:12,
				 key = "A,B")
# Get the key of DT
# Row where A == "b" and B == 6
# Return the prevailing row
# Return the nearest row
key(DT)
library(data.table)
# Keyed data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
				 B = c(5, 4, 1, 9, 8, 8, 6),
				 C = 6:12,
				 key = "A,B")
# Get the key of DT
key(DT)
DT[.("b",6)]
DT[.("b", 6), roll = TRUE]
DT[.("b", 6), roll = "nearest"]
DT[-2:10,by=B]
DT[-2:10]
DT[,-2:10]
DT[,-2:10, by = B]
DT[.("b", -2:10)]
DT[.("b", -2:10), roll = TRUE]
DT[.("b", -2:10)]
DT[.("b", -2:10), roll = TRUE]
DT[.("b", -2:10), roll = TRUE, rolllimit = -1]
DT[.("b", -2:10), roll = TRUE, rollends = TRUE]
function(school = "private", acad_motivation = 0, relig_motivation = 0) {
	eval(.expression)
}
test_case <- function(school = "private", acad_motivation = 0, relig_motivation = 0) {
	eval(.expression)
}
test_scores(school = "private", 			acad_motivation = 1, 			relig_motivation = 3)
test_scores <- function(school = "private", acad_motivation = 0, relig_motivation = 0) {
	eval(.expression)
}
test_scores(school = "private", 			acad_motivation = 1, 			relig_motivation = 3)
test_scores(school = "public", 			acad_motivation = 0, 			relig_motivation = 0)
install.packages(mosiac)
install.packages("mosiac")
install.packages("statisticalModeling")
install.packages("statisticalModeling")
install.packages("mosaicData")
install.packages("mosaic")
library(mosiac)
library(mosiac)
library(mosiac)
install.packages("mosaic")
library(mosiac)
library(mosaic)
data(cp"CPS85", package = "mosiacData")
data("CPS85", package = "mosiacData")
library(mosaicData)
data("CPS85", package = "mosiacData")
data("CPS85", package = "mosaicData")
data(CPS85)
install.packages("statisticalModeling")
names(mosaicData::Riders)
# Use data() to load Trucking_jobs
data("Trucking_jobs", package = "statisticalModeling")
# View the number rows in Trucking_jobs
nrow(Trucking_jobs)
# Use names() to find variable names in mosaicData::Riders
names(mosaicData::Riders)
# Load ggplot2 package
library(ggplot2)
# Look at the head() of diamonds
head(diamonds)names(mosaicData::Riders)
data("Trucking_jobs", package = "mosaicData")
library(mosaicData)
# Use data() to load Trucking_jobs
data("Trucking_jobs", package = "mosaicData")
# View the number rows in Trucking_jobs
nrow(Trucking_jobs)
# Use names() to find variable names in mosaicData::Riders
names(mosaicData::Riders)
# Load ggplot2 package
library(ggplot2)
# Look at the head() of diamonds
head(diamonds)
data("Trucking_jobs")
getwd()
load("DataCamp")
load("DataCamp\stastical.modeling_1\data\Trucking_jobs.rda")
load("DataCamp\\stastical.modeling_1\\data\\Trucking_jobs.rda")
# Use data() to load Trucking_jobs
load("DataCamp\\stastical.modeling_1\\data\\Trucking_jobs.rda")
# View the number rows in Trucking_jobs
nrow(Trucking_jobs)
# Use names() to find variable names in mosaicData::Riders
names(mosaicData::Riders)
# Load ggplot2 package
library(ggplot2)
# Look at the head() of diamonds
head(diamonds)load("DataCamp\\stastical.modeling_1\\data\\Trucking_jobs.rda")
library(mosaicData)
head(diamonds)
library(mosaicData)
# Use data() to load Trucking_jobs
load("DataCamp\\stastical.modeling_1\\data\\Trucking_jobs.rda")
# View the number rows in Trucking_jobs
nrow(Trucking_jobs)
# Use names() to find variable names in mosaicData::Riders
names(mosaicData::Riders)
# Load ggplot2 package
library(ggplot2)
# Look at the head() of diamonds
head(diamonds)
source("C:/Projects/R/Playground/Scripts/DataCamp/stastical.modeling_1/_working.R", encoding = "Windows-1252")
library(mosaicData)
# Use data() to load Trucking_jobs
load("DataCamp\\stastical.modeling_1\\data\\Trucking_jobs.rda")
# View the number rows in Trucking_jobs
nrow(Trucking_jobs)
# Use names() to find variable names in mosaicData::Riders
names(mosaicData::Riders)
# Load ggplot2 package
library(ggplot2)
# Look at the head() of diamonds
head(diamonds)
load("DataCamp\\stastical.modeling_1\\data\\AARP.rda")
names(AARP)
mosaic::mean(cost ~ sex, data = AARP)
names(AARP)
mosaic::mean(Cost ~ sex, data = AARP)
mosaic::mean(Cost ~ Sex, data = AARP)
library(ggplot2)
ggplot(AARP, aes(Cost ~ Sex))
ggplot(AARP, aes(Cost,Sex))
ggplot(AARP, aes( x = Cost, y = Sex))
ggplot(AARP, aes( x = Cost, y = Sex)) %>% box()
geom_boxplot(AARP, aes( x = Cost, y = Sex))
ggplot(AARP, aes( x = Cost, y = Sex)) + geom_boxplot()
ggplot(AARP, aes( Cost ~ Sex)) + geom_boxplot()
x =  ggplot(Cost ~ Sex,datat = AARP) + geom_boxplot()
ggplot(aes(Cost ~ Sex),datat = AARP) + geom_boxplot()
ggplot(aes(Cost ~ Age), datat = AARP) + geom_boxplot()
ggplot(aes(Cost ~ Age), datat = AARP) + geom_point()
ggplot(aes(Cost, Age), datat = AARP) + geom_point()
ggplot(aes(x = Cost, y = Age), datat = AARP) + geom_point()
ggplot(aes(x = Cost, y = Age), datat = AARP) + geom_point()
ggplot(aes(Cost ~ Sex), datat = AARP) + geom_boxplot()
ggplot(aes(x=Cost, y=Sex), datat = AARP) + geom_boxplot()
ggplot(aes(x=Cost, y=Sex), data = AARP) + geom_boxplot()
ggplot(aes(x = Cost, y = Age), data = AARP) + geom_point()
ggplot(aes(x=Cost, y=Sex), data = AARP) + geom_boxplot()
ggplot(aes(x=Sex, y=Cost), data = AARP) + geom_boxplot()
# Create a boxplot using base, lattice, or ggplot2
ggplot(aes(x=Sex, y=Cost), data = AARP) + geom_boxplot()
# Make a scatterplot using base, lattice, or ggplot2
ggplot(aes(x = Cost, y = Age), data = AARP) + geom_point()
ggplot(Sex ~ Cost, data = AARP) + geom_boxplot()
ggplot(aes(Sex ~ Cost), data = AARP) + geom_boxplot()
gf_boxplot(Sex ~ Cost)
ggplot(aes(x=Sex, y=Cost), data = AARP) + geom_boxplot()
file <- "DataCamp\importing.data_1\swimming_pools.csv"
library(utils) file <- "DataCamp\importing.data_1\swimming_pools.csv"
file <- "DataCamp\\importing.data_1\swimming_pools.csv"
library(utils) file <- "DataCamp\\importing.data_1\\swimming_pools.csv"
library(utils) file.sp <- "DataCamp\\importing.data_1\\swimming_pools.csv" read.csv(file = file.sp)
library(utils) file.sp <- c(getwd(), "DataCamp\\importing.data_1\\swimming_pools.csv") read.csv(file = file.sp)
library(utils) file.sp <- c(getwd(), "\\DataCamp\\importing.data_1\\swimming_pools.csv") read.csv(file = file.sp)
rm(file)
library(utils) file.sp <- c(getwd(), "\\DataCamp\\importing.data_1\\swimming_pools.csv") read.csv(file = file.sp)
file.sp <- paste0(getwd(), "\\DataCamp\\importing.data_1\\swimming_pools.csv")
read.csv(file = file.sp)
library(utils) file.sp <- paste0("\\DataCamp\\importing.data_1\\swimming_pools.csv") read.csv(file = file.sp)
library(utils) file.sp <- paste0("..\\DataCamp\\importing.data_1\\swimming_pools.csv") read.csv(file = file.sp)
dir()
library(utils) file.sp <- paste0("\\DataCamp\\importing.data_1\\swimming_pools.csv") read.csv(file = file.sp) dir()
dir(file.sp)
read.csv(file = file.sp)
library(utils) file.sp <- paste0("DataCamp\\importing.data_1\\swimming_pools.csv") read.csv(file = file.sp)
RPROJ <- list(PROJHOME = normalizePath(getwd()))
attach(RPROJ)
rm(RPROJ)
file.sp <- file.path(RPROJ, "DataCamp\importing.data_1\data")
file.sp <- file.path(RPROJ, "DataCamp\\importing.data_1\\data")
RPROJ <- list(PROJHOME = normalizePath(getwd())) file.sp <- file.path(RPROJ, "DataCamp\\importing.data_1\\data")
file.sp <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\swimming_ools.csv")
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) file.sp <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\swimming_ools.csv") read.csv(file = file.sp)
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) file.sp <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\swimming_pools.csv") read.csv(file = file.sp)
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) file.sp <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\swimming_pools.csv") pools <- read.csv(file = file.sp)
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) file.sp <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\swimming_pools.csv") pools <- read.csv(file = file.sp) str(pools)
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) file.sp <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\swimming_pools.csv") # Import swimming_pools.csv: pools pools <- read.csv(file = file.sp)
# Print the structure of pools str(pools)
RPROJ <- list(PROJHOME = normalizePath(getwd()))
dir()
t <- dir()
rm(t)
RPROJ <- list(PROJHOME = normalizePath(getwd()))
setwd(RPROJ, "DataCamp\\importing.data_1\\data\\")
RPROJ <- list(PROJHOME = normalizePath(getwd()))
setwd(paste0(RPROJ, "DataCamp\\importing.data_1\\data\\"))
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) swimming_pools <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\") # Import swimming_pools.csv: pools pools <- read.csv(file = swimming_pools, stringsAsFactors = FALSE)
# Print the structure of pools str(pools)
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) swimming_pools <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\swimming_pools.csv") # Import swimming_pools.csv: pools pools <- read.csv(file = swimming_pools, stringsAsFactors = FALSE)
# Print the structure of pools str(pools)
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) swimming_pools <- file.path(RPROJ, "DataCamp\\importing.data_1\\data\\swimming_pools.csv") # Import swimming_pools.csv: pools pools <- read.csv(file = swimming_pools)
# Print the structure of pools str(pools) # Import swimming_pools.csv correctly: pools
pools <- read.csv(file = swimming_pools, stringsAsFactors = FALSE)
# Check the structure of pools
str(pools)
# Import swimming_pools.csv: pools pools <- read.csv(file = swimming_pools)
# Print the structure of pools str(pools)
# Import swimming_pools.csv correctly: pools
pools <- read.csv(file = swimming_pools, stringsAsFactors = FALSE)
# Check the structure of pools
# Import swimming_pools.csv correctly: pools
pools <- read.csv(file = swimming_pools, stringsAsFactors = FALSE)
# Check the structure of pools
str(pools)
RPROJ <- list(PROJHOME = normalizePath(getwd()))
DATADIR <- "DataCamp\\importing.data_1\\data\\
RPROJ <- list(PROJHOME = normalizePath(getwd()))
RPROJ <- list(PROJHOME = normalizePath(getwd()))
DATADIR <- paste0(RPROJ, "DataCamp\\importing.data_1\\data\\")
RPROJ <- list(PROJHOME = normalizePath(getwd())) DATADIR <- paste0(RPROJ, normalizePath("DataCamp\\importing.data_1\\data\\"))
rm(file.sp)
RPROJ$PROJHOME
library(utils) RPROJ <- list(PROJHOME = normalizePath(getwd())) RPROJ$DATA <- paste0(RPROJ, normalizePath("DataCamp\\importing.data_1\\data\\"))
RPROJ <- list(HOME = normalizePath(getwd())) RPROJ$DATA <- paste0(RPROJ$HOME, normalizePath("DataCamp\\importing.data_1\\data\\"))
swimming_pools <- file.path(RPROJ$DATA, "swimming_pools.csv")
swimming_pools
RPROJ <- list(HOME = normalizePath(getwd())) RPROJ$DATA <- paste0(RPROJ$HOME, normalizePath("DataCamp\\importing.data_1\\data")) swimming_pools <- file.path(RPROJ$DATA, "swimming_pools.csv")
RPROJ <- list(HOME = normalizePath(getwd())) RPROJ$DATA <- paste0(RPROJ$HOME, normalizePath("DataCamp\\importing.data_1\\data")) swimming_pools <- file.path(RPROJ$DATA, "swimming_pools.csv") swimming_pools
swimming_pools <- normalizePath(RPROJ$DATA, "swimming_pools.csv") swimming_pools
swimming_pools <- normalizePath(RPROJ$DATA, "\\swimming_pools.csv")
RPROJ <- list(HOME = normalizePath(getwd())) RPROJ$DATA <- paste0(RPROJ$HOME, normalizePath("DataCamp\\importing.data_1\\data")) swimming_pools <- file.path(RPROJ$DATA, "swimming_pools.csv")
RPROJ$DATA
RPROJ <- list(HOME = normalizePath(getwd()))
RPROJ$DATA <- paste0(RPROJ$HOME, normalizePath("DataCamp\\importing.data_1\\data\\"))
swimming_pools <- file.path( paste0( RPROJ$DATA, "swimming_pools.csv"))
swimming_pools
swimming_pools <- file.path(paste0( RPROJ$DATA, "swimming_pools.csv"))
hotdogs <- file.path(paste0(RPROJ$DATA, "hotdogs.txt"))
hotdogs.txt <- file.path(paste0(RPROJ$DATA, "hotdogs.txt"))
swimming_pools.csv <- file.path(paste0( RPROJ$DATA, "swimming_pools.csv"))
library(utils) RPROJ <- list(HOME = normalizePath(getwd())) RPROJ$DATA <- paste0(RPROJ$HOME, normalizePath("DataCamp\\importing.data_1\\data\\")) swimming_pools.csv <- file.path(paste0( RPROJ$DATA, "swimming_pools.csv")) ## CSV # Import swimming_pools.csv: pools pools <- read.csv(file = swimming_pools.csv)
# Print the structure of pools str(pools) # Import swimming_pools.csv correctly: pools
pools <- read.csv(file = swimming_pools.csv, stringsAsFactors = FALSE)
# Check the structure of pools
str(pools)
hotdogs.txt <- file.path(paste0(RPROJ$DATA, "hotdogs.txt"))
## TXT / DELM
# Import hotdogs.txt: hotdogs
hotdogs <- read.delim( file = hot)
# Summarize hotdogs
library(utils) RPROJ <- list(HOME = normalizePath(getwd())) RPROJ$DATA <- paste0(RPROJ$HOME, normalizePath("DataCamp\\importing.data_1\\data\\")) swimming_pools.csv <- file.path(paste0( RPROJ$DATA, "swimming_pools.csv")) ## CSV # Import swimming_pools.csv: pools pools <- read.csv(file = swimming_pools.csv)
# Print the structure of pools str(pools) # Import swimming_pools.csv correctly: pools
pools <- read.csv(file = swimming_pools.csv, stringsAsFactors = FALSE)
# Check the structure of pools
str(pools)
hotdogs.txt <- file.path(paste0(RPROJ$DATA, "hotdogs.txt"))
## TXT / DELM
# Import hotdogs.txt: hotdogs
hotdogs <- read.delim( file = hot)
# Summarize hotdogs
swimming_pools.csv <- file.path(paste0( RPROJ$DATA, "swimming_pools.csv"))
pools <- read.csv(file = swimming_pools.csv)
swimming_pools.csv
paste0(RPROJ$DATA, "swimming_pools.csv")
RPROJ$DATA
RPROJ <- list(HOME = normalizePath(getwd()))
RPROJ$DATA <- paste0(RPROJ, normalizePath("DataCamp\\importing.data_1\\data\\"))
RPROJ$DATA
RPROJ <- list(HOME = normalizePath(getwd())) RPROJ$DATA <- normalizePath("DataCamp\\importing.data_1\\data\\") RPROJ$DATA
RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data_1\\data\\"))
swimming_pools.csv <- file.path(paste0(RPROJ$DATA, "swimming_pools.csv"))
paste0(RPROJ$DATA, "swimming_pools.csv")
swimming_pools.csv
library(utils) RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data_1\\data\\")) swimming_pools.csv <- file.path(paste0(RPROJ$DATA, "swimming_pools.csv")) ## CSV # Import swimming_pools.csv: pools pools <- read.csv(file = swimming_pools.csv)
# Print the structure of pools str(pools) # Import swimming_pools.csv correctly: pools
pools <- read.csv(file = swimming_pools.csv, stringsAsFactors = FALSE)
# Check the structure of pools
str(pools)
hotdogs.txt <- file.path(paste0(RPROJ$DATA, "hotdogs.txt"))
## TXT / DELM
# Import hotdogs.txt: hotdogs
hotdogs <- read.delim( file = hot)
# Summarize hotdogs
hotdogs <- read.delim( file = hotdogs.txt)
Summary(hotdogs)
summary(hotdogs)
# Import hotdogs.txt: hotdogs
hotdogs <- read.delim( file = hotdogs.txt, header = FALSE)
# Summarize hotdogs
summary(hotdogs)
path <- file.path(RPROJ$DATA, "hotdogs.txt")
# Path to the hotdogs.txt file: path
path <- file.path(RPROJ$DATA, "hotdogs.txt")
# Import the hotdogs.txt file: hotdogs
hotdogs <- read.table(path,
					  sep = " ",
					  col.names = c("type", "calories", "sodium"))
# Call head() on hotdogs
head(hotdogs)
# Path to the hotdogs.txt file: path
path <- file.path(RPROJ$DATA, "hotdogs.txt")
# Import the hotdogs.txt file: hotdogs
hotdogs <- read.table(path,
					  sep = "",
					  col.names = c("type", "calories", "sodium"))
# Call head() on hotdogs
head(hotdogs)
# Finish the read.delim() call
hotdogs <- read.delim(hotdogs.txt, header = FALSE, col.names = c("type", "calories", "sodium"))
# Select the hot dog with the least calories: lily
lily <- hotdogs[which.min(hotdogs$calories),]
# Select the observation with the most sodium: tom
tom <- hotdogs[which.max(hotdogs$sodium)]
# Print lily and tom
lily
tom
# Finish the read.delim() call
hotdogs <- read.delim(hotdogs.txt, header = FALSE, col.names = c("type", "calories", "sodium"))
# Select the hot dog with the least calories: lily
lily <- hotdogs[which.min(hotdogs$calories),]
# Select the observation with the most sodium: tom
tom <- hotdogs[which.max(hotdogs$sodium),]
lily
tom
str(hotdogs)
# Edit the colClasses argument to import the data correctly: hotdogs2
hotdogs2 <- read.delim("hotdogs.txt", header = FALSE,
					   col.names = c("type", "calories", "sodium"),
					   colClasses = c("factor", "null", "numeric"))
# Edit the colClasses argument to import the data correctly: hotdogs2
hotdogs2 <- read.delim(hotdogs.txt, header = FALSE,
					   col.names = c("type", "calories", "sodium"),
					   colClasses = c("factor", "null", "numeric"))
# Edit the colClasses argument to import the data correctly: hotdogs2
hotdogs2 <- read.delim(hotdogs.txt, header = FALSE,
					   col.names = c("type", "calories", "sodium"),
					   colClasses = c("factor", "NULL", "numeric"))
str(hotdogs2)
library(readr)
library(readr) RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data_1\\data\\"))
potatos.csv <- paste0(RPROJ$DATA, "potatos.csv")
potatos <- read_csv(potatos.csv)
potatoes.csv <- paste0(RPROJ$DATA, "potatoes.csv")
# Import potatoes.csv with read_csv(): potatoes
potatoes.csv <- read_csv(potatos.csv)
rm(potatos.csv, envir = as.environment(".GlobalEnv"))
potatoes.csv <- paste0(RPROJ$DATA, "potatoes.csv")
potatoes.csv <- read_csv(potatoes.csv)
# Load the readr package library(readr)
RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data_1\\data\\"))
potatoes.csv <- paste0(RPROJ$DATA, "potatoes.csv")
# Import potatoes.csv with read_csv(): potatoes
potatoes <- read_csv(potatoes.csv)
potatoes.txt <- paste0(RPROJ$DATA, "potatoes.txt")
potatoes.txt <- paste0(RPROJ$DATA, "potatoes.txt")
# Column names
properties <- c("area", "temp", "size", "storage", "method",
				"texture", "flavor", "moistness")
# Import potatoes.txt: potatoes
potatoes <- read_csv(potatoes.txt, col_names = properties)
# Call head() on potatoes
head(potatoes)
# Import potatoes.txt: potatoes
potatoes <- read_tsv(potatoes.txt, col_names = properties)
# Call head() on potatoes
head(potatoes)
potatoes <- read_delim(potatoes.txt, col_names = properties)
potatoes <- read_delim(potatoes.txt, delim = "\t", col_names = properties)
potatoes
potatoes_fragment <- read_tsv(potatoes.txt,
	skip = 6,
	n_max = 5,
	col_names = properties
)
str(potatoes_fragment)
# Import all data, but force all columns to be character: potatoes_char
potatoes_char <- read_tsv(potatoes.txt, col_types = "cccccccc", col_names = properties)
# Print out structure of potatoes_char
str(potatoes_char)
summary(hotdogs)
# Import without col_types
hotdogs <- read_tsv("hotdogs.txt", col_names = c("type", "calories", "sodium"))
# Display the summary of hotdogs
summary(hotdogs)
hotdogs <- read_tsv(hotdogs.txt, col_names = c("type", "calories", "sodium"))
hotdogs.txt <- paste0(RPROJ$DATA, "hotdogs.txt")
hotdogs <- read_tsv(hotdogs.txt, col_names = c("type", "calories", "sodium"))
summary(hotdogs)
# The collectors you will need to import the data
fac <- col_factor(levels = c("Beef", "Meat", "Poultry"))
int <- col_integer()
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv("hotdogs.txt",
						   col_names = c("type", "calories", "sodium"),
						   col_types = c(fac, int, int)
# Display the summary of hotdogs_factor
summary(hotdogs) # The collectors you will need to import the data
fac <- col_factor(levels = c("Beef", "Meat", "Poultry"))
int <- col_integer()
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv("hotdogs.txt",
						   col_names = c("type", "calories", "sodium"),
						   col_types = c(fac, int, int))
# Display the summary of hotdogs_factor
summary(hotdogs)
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
						   col_names = c("type", "calories", "sodium"),
						   col_types = c(fac, int, int))
# Display the summary of hotdogs_factor
summary(hotdogs)
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
						   col_names = c("type", "calories", "sodium"),
						   col_types = list(fac, int, int))
# Display the summary of hotdogs_factor
summary(hotdogs)
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
						   col_names = c("type", "calories", "sodium"),
						   col_types = list(fac, int, int))
# Display the summary of hotdogs_factor
summary(hotdogs)
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
						   col_names = c("type", "calories", "sodium"),
						   col_types = list(fac, int, int))
# Display the summary of hotdogs_factor
summary(hotdogs)
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
						   col_names = c("type", "calories", "sodium"),
						   col_types = list(fac, int, int))
# Display the summary of hotdogs_factor
summary(hotdogs)
hotdogs_factor <- read_tsv(hotdogs.txt,
						   col_names = c("type", "calories", "sodium"),
						   col_types = list(fac, int, int))
update.packages("readr")
hotdogs_factor <- read_tsv(hotdogs.txt,
						   col_names = c("type", "calories", "sodium"),
						   col_types = list(fac, int, int))
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
						   fileEncoding = "UTF-8-BOM",
						   col_names = c("type", "calories", "sodium"),
						   col_types = list(fac, int, int))
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
	col_names = c("type", "calories", "sodium"),
	col_types = list(fac, int, int)
)
# Display the summary of hotdogs_factor
summary(hotdogs)
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
	col_names = c("type", "calories", "sodium"),
	col_types = list(fac, int, int)
)
summary(hotdogs)
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv(hotdogs.txt,
	col_names = c("type", "calories", "sodium"),
	col_types = list(fac, int, int)
)
# Display the summary of hotdogs_factor
summary(hotdogs_factor)
library(data.table)
install.packages("data.table")
library(data.table)
potatoes <- fread(potatoes.txt)
potatoes
# Import potatoes.csv with fread(): potatoes
potatoes <- fread(potatoes.csv)
# Print out potatoes
potatoes
potatoes <- fread(potatoes.csv, select = c(6,8))
plot(potatoes$texture, potatoes$moistness)
install.packages("readxl")
library(readxl)
RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data_1\\data\\"))
setwd(RPROJ$DATA)
excel_sheets("urbanpop.xlsx")
pop_1 <- read_excel("urbanpop.xlsx", sheet = 1)
pop_2 <- read_excel("urbanpop.xlsx", sheet = 2)
pop_list <- list(pop_1,pop_2)
str(pop_list)
excel_sheets("urbanpop.xlsx")
# Read the sheets, one by one
pop_1 <- read_excel("urbanpop.xlsx", sheet = 1)
pop_2 <- read_excel("urbanpop.xlsx", sheet = 2)
pop_3 <- read_excel("urbanpop.xlsx", sheet = 3)
# Put pop_1, pop_2 and pop_3 in a list: pop_list
pop_list <- list(pop_1,pop_2,pop_3)
# Display the structure of pop_list
str(pop_list)
# Read all Excel sheets with lapply(): pop_list
pop_list <- lapply(excel_sheets("urbanpop.xlsx"),
	FUN = function(sheetName) { read_excel("urbanpop.xlsx", sheetName) }
)
str(pop_list)
# Load the readr package library(readr) library(data.table) RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data\\data\\")) potatoes.csv <- paste0(RPROJ$DATA, "potatoes.csv") # Import potatoes.csv with read_csv(): potatoes potatoes <- read_csv(potatoes.csv) # readr is already loaded potatoes.txt <- paste0(RPROJ$DATA, "potatoes.txt") # Column names properties <- c("area", "temp", "size", "storage", "method", 				"texture", "flavor", "moistness") # Import potatoes.txt: potatoes potatoes <- read_tsv(potatoes.txt, col_names = properties) # Call head() on potatoes head(potatoes) # Import potatoes.txt using read_delim(): potatoes potatoes <- read_delim(potatoes.txt, delim = "\t", col_names = properties) # Print out potatoes potatoes # Import 5 observations from potatoes.txt: potatoes_fragment potatoes_fragment <- read_tsv(potatoes.txt, 	skip = 6, 	n_max = 5, 	col_names = properties ) # Import all data, but force all columns to be character: potatoes_char potatoes_char <- read_tsv(potatoes.txt, col_types = "cccccccc", col_names = properties) # Print out structure of potatoes_char str(potatoes_char) hotdogs.txt <- paste0(RPROJ$DATA, "hotdogs.txt") # Import without col_types hotdogs <- read_tsv(hotdogs.txt, col_names = c("type", "calories", "sodium")) # Display the summary of hotdogs summary(hotdogs) # The collectors you will need to import the data fac <- col_factor(levels = c("Beef", "Meat", "Poultry")) int <- col_integer() # Edit the col_types argument to import the data correctly: hotdogs_factor hotdogs_factor <- read_tsv(hotdogs.txt, 	col_names = c("type", "calories", "sodium"), 	col_types = list(fac, int, int) ) # Display the summary of hotdogs_factor summary(hotdogs_factor) # Import potatoes.csv with fread(): potatoes potatoes <- fread(potatoes.csv) # Print out potatoes potatoes # Import columns 6 and 8 of potatoes.csv: potatoes potatoes <- fread(potatoes.csv, select = c(6,8)) # Plot texture (x) and moistness (y) of potatoes plot(potatoes$texture, potatoes$moistness)
library(utils) RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data\\data\\")) swimming_pools.csv <- file.path(paste0(RPROJ$DATA, "swimming_pools.csv")) ## CSV # Import swimming_pools.csv: pools pools <- read.csv(file = swimming_pools.csv) # Print the structure of pools str(pools) # Import swimming_pools.csv correctly: pools pools <- read.csv(file = swimming_pools.csv, stringsAsFactors = FALSE) # Check the structure of pools str(pools) hotdogs.txt <- file.path(paste0(RPROJ$DATA, "hotdogs.txt")) ## TXT / DELM # Import hotdogs.txt: hotdogs hotdogs <- read.delim( file = hotdogs.txt, header = FALSE) # Summarize hotdogs summary(hotdogs) # Path to the hotdogs.txt file: path path <- file.path(RPROJ$DATA, "hotdogs.txt") # Import the hotdogs.txt file: hotdogs hotdogs <- read.table(path, 					  sep = "", 					  col.names = c("type", "calories", "sodium")) # Call head() on hotdogs head(hotdogs) # Finish the read.delim() call hotdogs <- read.delim(hotdogs.txt, header = FALSE, 	col.names = c("type", "calories", "sodium")) # Select the hot dog with the least calories: lily lily <- hotdogs[which.min(hotdogs$calories),] # Select the observation with the most sodium: tom tom <- hotdogs[which.max(hotdogs$sodium),] # Print lily and tom lily tom # Display structure of hotdogs str(hotdogs) # Edit the colClasses argument to import the data correctly: hotdogs2 hotdogs2 <- read.delim(hotdogs.txt, header = FALSE, 					   col.names = c("type", "calories", "sodium"), 					   colClasses = c("factor", "NULL", "numeric")) # Display structure of hotdogs2 str(hotdogs2)
library(readxl) RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data\\data\\")) setwd(RPROJ$DATA) excel_sheets("urbanpop.xlsx") # Read the sheets, one by one pop_1 <- read_excel("urbanpop.xlsx", sheet = 1) pop_2 <- read_excel("urbanpop.xlsx", sheet = 2) pop_3 <- read_excel("urbanpop.xlsx", sheet = 3) # Put pop_1, pop_2 and pop_3 in a list: pop_list pop_list <- list(pop_1,pop_2,pop_3) # Display the structure of pop_list str(pop_list) # Read all Excel sheets with lapply(): pop_list pop_list <- lapply(excel_sheets("urbanpop.xlsx"), 	FUN = function(sheetName) { read_excel("urbanpop.xlsx", sheetName) } ) # Display the structure of pop_list str(pop_list)
pop_a <- read_excel("urbanpop_nonames.xlsx", sheet = 1)
library(readxl) RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data\\data\\")) setwd(RPROJ$DATA) excel_sheets("urbanpop.xlsx") # Read the sheets, one by one pop_1 <- read_excel("urbanpop.xlsx", sheet = 1) pop_2 <- read_excel("urbanpop.xlsx", sheet = 2) pop_3 <- read_excel("urbanpop.xlsx", sheet = 3) # Put pop_1, pop_2 and pop_3 in a list: pop_list pop_list <- list(pop_1,pop_2,pop_3) # Display the structure of pop_list str(pop_list) # Read all Excel sheets with lapply(): pop_list pop_list <- lapply(excel_sheets("urbanpop.xlsx"), 	FUN = function(sheetName) { read_excel("urbanpop.xlsx", sheetName) } ) # Display the structure of pop_list str(pop_list) # Import the the first Excel sheet of urbanpop_nonames.xlsx (R gives names): pop_a
pop_a <- read_excel("urbanpop_nonames.xlsx", sheet = 1)
# Import the the first Excel sheet of urbanpop_nonames.xlsx (specify col_names): pop_b
cols <- c("country", paste0("year_", 1960:1966))
# Print the summary of pop_a
# Print the summary of pop_b
pop_b <- read_excel("urbanpop_nonames.xlsx", col_names = cols, sheet = 1 )
# Import the the first Excel sheet of urbanpop_nonames.xlsx (R gives names): pop_a
pop_a <- read_excel("urbanpop_nonames.xlsx", sheet = 1)
# Import the the first Excel sheet of urbanpop_nonames.xlsx (specify col_names): pop_b
cols <- c("country", paste0("year_", 1960:1966))
pop_b <- read_excel("urbanpop_nonames.xlsx", col_names = cols, sheet = 1 )
# Print the summary of pop_a
summary(pop_a)
# Print the summary of pop_b
summary(pop_b)
urbanpop_sel <- read_excel("urbanpop_nonames.xlsx", sheet = 2, col_names = FALSE, skip = 21)
head(urbanpop_sel,1)
# Import the second sheet of urbanpop.xlsx, skipping the first 21 rows: urbanpop_sel
urbanpop_sel <- read_excel(path = "urbanpop.xlsx", sheet = 2, skip = 21, col_names = FALSE)
# Print out the first observation from urbanpop_sel
head(urbanpop_sel, 1)
install.packages("gdaga")
install.packages("gdata")
library(gdata)
urban_pop <- read.xls("urbanpop.xlsx", sheet = 2)
urban_pop <- read.xls( file = "urbanpop.xlsx", sheet = 2)
urban_pop <- read.xls( xls = "urbanpop.xlsx", sheet = 2)
urban_pop <- read.xls( xls = "urbanpop.xlsx", sheet = 2)
# Import the second sheet of urbanpop.xls: urban_pop
urban_pop <- read.xls( xls = "urbanpop.xls", sheet = 2)
# Print the first 11 observations using head()
head(urban_pop,11)
install.packages("XLConnect")
library(XLConnect)
my_book <- loadWorkbook("urbanpop.xlsx")
class(my_book)
sheetNames(my_book)
getSheets(my_book)
readWorksheet(my_book, 2)
urbanpop_sel <- readWorksheet(my_book, sheet = 2, startCol = 3, endCol = 5)
countries <- readWorksheet(my_book, sheet = 2, startCol = 1, endCol = 1)
selection <- cbind(urbanpop_sel, countries)
createSheet(my_book, "data_summary")
getSheets(my_book)
# Create data frame: summ
sheets <- getSheets(my_book)[1:3]
dims <- sapply(sheets, function(x) dim(readWorksheet(my_book, sheet = x)), USE.NAMES = FALSE)
summ <- data.frame(sheets = sheets,
				   nrows = dims[1,],
				   ncols = dims[2,])
# Add data in summ to "data_summary" sheet
writeWorksheet(my_book, "data_summary", summ)
# Save workbook as summary.xlsx
saveWorkbook(my_book)
writeWorksheet(my_book, summ, "data_summary")
saveWorkbook(my_book)
saveWorkbook(my_book, "summary.xlsx")
renameSheet(my_book, "data_summary", "summary")
getSheets(my_book)
saveWorkbook(my_book,"renamex.xlsx")
library(readxl) library(gdata) library(XLConnect) RPROJ <- list(HOME = normalizePath(getwd()), DATA = normalizePath("DataCamp\\importing.data\\data\\")) setwd(RPROJ$DATA) excel_sheets("urbanpop.xlsx") # Read the sheets, one by one pop_1 <- read_excel("urbanpop.xlsx", sheet = 1) pop_2 <- read_excel("urbanpop.xlsx", sheet = 2) pop_3 <- read_excel("urbanpop.xlsx", sheet = 3) # Put pop_1, pop_2 and pop_3 in a list: pop_list pop_list <- list(pop_1,pop_2,pop_3) # Display the structure of pop_list str(pop_list) # Read all Excel sheets with lapply(): pop_list pop_list <- lapply(excel_sheets("urbanpop.xlsx"), 	FUN = function(sheetName) { read_excel("urbanpop.xlsx", sheetName) } ) # Display the structure of pop_list str(pop_list) # Import the the first Excel sheet of urbanpop_nonames.xlsx (R gives names): pop_a
pop_a <- read_excel("urbanpop_nonames.xlsx", sheet = 1)
# Import the the first Excel sheet of urbanpop_nonames.xlsx (specify col_names): pop_b
cols <- c("country", paste0("year_", 1960:1966))
pop_b <- read_excel("urbanpop_nonames.xlsx", col_names = cols, sheet = 1 )
# Print the summary of pop_a
summary(pop_a)
# Print the summary of pop_b
summary(pop_b)
# Import the second sheet of urbanpop.xlsx, skipping the first 21 rows: urbanpop_sel
urbanpop_sel <- read_excel(path = "urbanpop.xlsx", sheet = 2, skip = 21, col_names = FALSE)
# Print out the first observation from urbanpop_sel
head(urbanpop_sel, 1)
# Import the second sheet of urbanpop.xls: urban_pop
urban_pop <- read.xls( xls = "urbanpop.xls", sheet = 2)
# Print the first 11 observations using head()
head(urban_pop, 11)
# Column names for urban_pop
columns <- c("country", paste0("year_", 1967:1974))
# Finish the read.xls call
urban_pop <- read.xls("urbanpop.xls", sheet = 2,
					  skip = 50, header = FALSE, stringsAsFactors = FALSE,
					  col.names = columns)
# Print first 10 observation of urban_pop
head(urban_pop, 10)
# Add code to import data from all three sheets in urbanpop.xls
path <- "urbanpop.xls"
urban_sheet1 <- read.xls(path, sheet = 1, stringsAsFactors = FALSE)
urban_sheet2 <- read.xls(path, sheet = 2, stringsAsFactors = FALSE)
urban_sheet3 <- read.xls(path, sheet = 3, stringsAsFactors = FALSE)
# Extend the cbind() call to include urban_sheet3: urban
urban <- cbind(urban_sheet1, urban_sheet2[-1], urban_sheet2[-2])
# Remove all rows with NAs from urban: urban_clean
urban_clean <- na.omit(urban)
# Print out a summary of urban_clean
summary(urban_clean)
# Build connection to urbanpop.xlsx: my_book
my_book <- loadWorkbook("urbanpop.xlsx")
# Print out the class of my_book
class(my_book)
# List the sheets in my_book
getSheets(my_book)
# Import the second sheet in my_book
readWorksheet(my_book, 2)
# Import columns 3, 4, and 5 from second sheet in my_book: urbanpop_sel
urbanpop_sel <- readWorksheet(my_book, sheet = 2, startCol = 3, endCol = 5)
# Import first column from second sheet in my_book: countries
countries <- readWorksheet(my_book, sheet = 2, startCol = 1, endCol = 1)
# cbind() urbanpop_sel and countries together: selection
selection <- cbind(countries, urbanpop_sel)
# Add a worksheet to my_book, named "data_summary"
createSheet(my_book, "data_summary")
# Use getSheets() on my_book
getSheets(my_book)
# Create data frame: summ
sheets <- getSheets(my_book)[1:3]
dims <- sapply(sheets, function(x) dim(readWorksheet(my_book, sheet = x)), USE.NAMES = FALSE)
summ <- data.frame(sheets = sheets,
				   nrows = dims[1,],
				   ncols = dims[2,])
# Add data in summ to "data_summary" sheet
writeWorksheet(my_book, summ, "data_summary")
# Save workbook as summary.xlsx
saveWorkbook(my_book, "summary.xlsx")
# Rename "data_summary" sheet to "summary"
renameSheet(my_book, "data_summary", "summary")
# Print out sheets of my_book
getSheets(my_book)
# Save workbook to "renamed.xlsx"
saveWorkbook(my_book,"renamed.xlsx")
removeSheet(my_book, "summary")
saveWorkbook(my_book, "clean.xlsx")
( int_mat <- matrix(1:12, 3))
class(int_mat)
typeof(int_mat)
( num_mat <- matrix(rnorm(12), 3))
(num_mat <- matrix(rnorm(12), 3)) class(num_mat) typeof(num_mat)
mode(num_mat)
storage.mode(num_mat)
# Look at the definition of type_info()
type_info
# Create list of example variables
some_vars <- list(
  an_integer_vector = rpois(24, lambda = 5),
  a_numeric_vector = rbeta(24, shape1 = 1, shape2 = 1),
  an_integer_array = array(rbinom(24, size = 8, prob = 0.5), dim = c(2, 3, 4)),
  a_numeric_array = array(rweibull(24, shape = 1, scale = 1), dim = c(2, 3, 4)),
  a_data_frame = data.frame(int = rgeom(24, prob = 0.5), num = runif(24)),
  a_factor = factor(month.abb),
  a_formula = y ~ x,
  a_closure_function = mean,
  a_builtin_function = length,
  a_special_function = `if`
)
# Loop over some_vars calling type_info() on each element to explore them
type_info <- function(x) {
	c(
	class = class(x),
	typeof = typeof(x),
	mode = mode(x),
	storage.mode = storage.mode(x)
  )
} # Look at the definition of type_info()
type_info
# Create list of example variables
some_vars <- list(
  an_integer_vector = rpois(24, lambda = 5),
  a_numeric_vector = rbeta(24, shape1 = 1, shape2 = 1),
  an_integer_array = array(rbinom(24, size = 8, prob = 0.5), dim = c(2, 3, 4)),
  a_numeric_array = array(rweibull(24, shape = 1, scale = 1), dim = c(2, 3, 4)),
  a_data_frame = data.frame(int = rgeom(24, prob = 0.5), num = runif(24)),
  a_factor = factor(month.abb),
  a_formula = y ~ x,
  a_closure_function = mean,
  a_builtin_function = length,
  a_special_function = `if`
)
# Loop over some_vars calling type_info() on each element to explore them
type_info
apply(some_vars, type_info)
apply(some_vars, FUN = type_info)
lapply(some_vars, type_info)
(x <- rexp(10))
class(x)
class(x) <- "random_numbers"
class(x)
x
x
typeof(x)
is.numeric(x)
length(x)
mean(x)
summary( c( TRUE, FALSE, NA, TRUE) )
summary(rgamma(1000, 1))
print.function
print.Date
library(plyr)
is_s3_generic("t")
library(plyr)
library(pryr) is_s3_generic("t") # generic transpose function is_s3_method("t.data.frame") # transpose method for data.frames is_s3_method("t.test") # a function for Student's t-tests 
install.packages("plyr")
install.packages("plyr")
update.packages("plyr")
library(plyr)
install.packages("plyr")
install.packages("plyr")
library(pryr) is_s3_generic("t") # generic transpose function is_s3_method("t.data.frame") # transpose method for data.frames is_s3_method("t.test") # a function for Student's t-tests 
library(pryr)
options("repos")[[1]][1]
install.packages("pltr")
install.packages("plyr")
install.packages("C:\Users\bmore\AppData\Local\Temp\RtmpcNiG8z\downloaded_packages\plyr_1.8.4.zip", repos = NULL)
install.packages(normalizePath("C:\Users\bmore\AppData\Local\Temp\RtmpcNiG8z\downloaded_packages\plyr_1.8.4.zip"), repos = NULL)
install.packages(normalizePath("C:\\Users\bmore\AppData\Local\Temp\RtmpcNiG8z\downloaded_packages\plyr_1.8.4.zip"), repos = NULL)
install.packages(normalizePath("\Users\bmore\AppData\Local\Temp\RtmpcNiG8z\downloaded_packages\plyr_1.8.4.zip"), repos = NULL)
install.packages(normalizePath("\Users\bmore\AppData\Local\Temp\RtmpcNiG8z\downloaded_packages\plyr_1.8.4.zip"), repos = NULL)
file.path("C:\Users\bmore\AppData\Local\Temp\RtmpcNiG8z\downloaded_packages\plyr_1.8.4.zip")
normalizePath("C:\Users\bmore\AppData\Local\Temp\RtmpcNiG8z\downloaded_packages\plyr_1.8.4.zip")
R.home()

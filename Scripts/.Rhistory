update.packages()
update.packages()
install.packages("moments")
install.packages("moments", dependencies = TRUE)
library(moments)
library(moments) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) deck.cards <- 52 deck.hand <- 5 deck.faces <- 13 options(digits = 13) choose.long <- function(n, k) { 	as.integer( factorial( n )/ ( factorial( k ) * factorial( n - k ) ) ) } short <- choose(deck.cards, deck.hand) long <- choose.long(deck.cards, deck.hand) stopifnot(short == long) # 4 of same card (aces, for example) = # 52 cards, take 4 we need (aces), + *any* 1 additional resulting card to fill the hand. prob.card <- ( deck.cards - ( deck.hand - 1 ) ) / choose(deck.cards, deck.hand) round(prob.card * 100, 4) # 4 of a kind (same face) # 13 faces, 1 way to get it to be all the same. prob.kind <- ( deck.faces * deck.cards - ( deck.hand - 1 ) ) / choose(deck.cards, deck.hand) round(prob.kind * 100, 4) # single pair in a 5 card hand # prob pair = 13, 4 choose 2 ways of picking the pair, 13 choose 2 for picking the non-pair, 4^3 ways of choosing from non-pair faces prob.onepair <- deck.faces * choose(4, 2) * choose(12, 3) * 4 ^ 3 / choose(deck.cards, deck.hand) round(prob * 100, 2) # Annualized historic volatility from a time series (1 yr, monthly) S = c(1.3, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.4, 1.5) volatility <- function( R ) { 	diffLogR <- diff( log( R ) )  	diffLogRmean <- mean(diffLogR) 	N = length(diffLogR) 	histVol = sqrt(1 / (N - 1) * sum((diffLogR - diffLogRmean) ^ 2)) 	annHistVol = histVol * sqrt(length(R)) 	annHistVol } volatility(S)
library(moments) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) deck.cards <- 52 deck.hand <- 5 deck.faces <- 13 options(digits = 13) choose.long <- function(n, k) { 	as.integer( factorial( n )/ ( factorial( k ) * factorial( n - k ) ) ) } short <- choose(deck.cards, deck.hand) long <- choose.long(deck.cards, deck.hand) stopifnot(short == long) # 4 of same card (aces, for example) = # 52 cards, take 4 we need (aces), + *any* 1 additional resulting card to fill the hand. prob.card <- ( deck.cards - ( deck.hand - 1 ) ) / choose(deck.cards, deck.hand) round(prob.card * 100, 4) # 4 of a kind (same face) # 13 faces, 1 way to get it to be all the same. prob.kind <- ( deck.faces * deck.cards - ( deck.hand - 1 ) ) / choose(deck.cards, deck.hand) round(prob.kind * 100, 4) # single pair in a 5 card hand # prob pair = 13, 4 choose 2 ways of picking the pair, 13 choose 2 for picking the non-pair, 4^3 ways of choosing from non-pair faces prob.onepair <- deck.faces * choose(4, 2) * choose(12, 3) * 4 ^ 3 / choose(deck.cards, deck.hand) round(prob.onepair * 100, 2) # Annualized historic volatility from a time series (1 yr, monthly) S = c(1.3, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.4, 1.5) volatility <- function( R ) { 	diffLogR <- diff( log( R ) )  	diffLogRmean <- mean(diffLogR) 	N = length(diffLogR) 	histVol = sqrt(1 / (N - 1) * sum((diffLogR - diffLogRmean) ^ 2)) 	annHistVol = histVol * sqrt(length(R)) 	annHistVol } volatility(S)
library(moments)
skewness(S)
kurtosis(X)
kurtosis(S)
kurtosis(S)
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = ""))
install.packages("data.table")
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = ""))
install.packages("data.table")
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = ""))
install.packages("foreign")
require(foreign)
require(foreign)
install.packages("foreign")
library(foreign)
require(data.table)
library(foreign)
.libPaths(c(.libPaths(), "~/userLibrary"))
.libPaths()
.libPaths()
dest <- .libPaths()
install.packages("data.table", lib = .libPaths(), dependencies = TRUE)
library(zoo)
install.packages("foreign", lib = .libPaths(), dependencies = TRUE)
library(foreign)
install.packages("foreign", lib = .libPaths(), dependencies = TRUE)
library(foreign)
install.packages("foreign", destdir = = .libPaths(), dependencies = TRUE)
install.packages("foreign", destdir = .libPaths(), dependencies = TRUE)
install.packages("foreign", destdir = .libPaths(), dependencies = TRUE)install.packages("foreign", destdir = .libPaths(), dependencies = TRUE)
install.packages("foreign", destdir = .libPaths(), dependencies = TRUE)
install.packages("data.table", destdir = .libPaths(), dependencies = TRUE)
install.packages("data.table", lib = .libPaths(), dependencies = TRUE)
library(foreign)
library(foreign)
installed.packages()
version()
version
.libPaths()
install.packages("data.table", , dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("foreign", dependencies = TRUE)
library(foreign)
homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = ""))
version()
version
read.dta
funda <- read.dta("funda.dta")
msft <- read.dta("msf.dat")
msft <- read.dta("msf.dta")
data.file <- read.dta("funda.dta")
rm(funda)
rm(msft)
loadDtaFile(sqlConnection, "funda.dta", "funda")
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; User Id=bmoretz; Password=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta("funda.dta") 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; uid=bmoretz; Password=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta("funda.dta") 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; uid=bmoretz; Password=letmein;";
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta("funda.dta") 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta("funda.dta") 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
msf <- read.dta("msf.dta")
require(RevoScaleR) require(data.table) library(foreign) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; # Common loadDtaFile <- function(sqlConnection, fileName, sqlTable) { 	data.file <- read.dta(fileName) 	data.table <- RxSqlServerData( 	  connectionString = sqlConnection, 	  table = sqlTable) 	rxDataStep(inData = data.file, outFile = data.table, overwrite = T) } loadDtaFile(sqlConnection, "funda.dta", "funda") loadDtaFile(sqlConnection, "msf.dta", "msf")
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; sqlReturnData <- RxSqlServerData( 	connectionString = sqlConnection, 	sqlQuery = sprintf(' 		SELECT 			[tsymbol], 			[ret] 		FROM 			dbo.[msf] 		WHERE 			[date] BETWEEN \'%s\' AND \'%s\'  			AND 			[tsymbol] in (\'%s\', \'%s\' ) 	;', '2005-01-01', '2013-12-31', 'AAPL', 'SPY'), 	stringsAsFactors = FALSE, 	useFastRead = TRUE ) raw.data <- as.data.table(rxImport(sqlReturnData, overwrite = TRUE, stringsAsFactors = FALSE))
y <- raw.data[ raw.data$tsymbol == 'AAPL', ]$ret
x <- raw.data[raw.data$tsymbol == 'SPY',]$ret
cov(x, y) / var(x)
beta <- cov(x, y) / var(x)
summary(lm(y ~ x + 1))
cov(x, y) / var(x)
summary(lm(y ~ x + 1))
shapiro.test(x)
shapiro.test(y)
plot(x,y)
require(RevoScaleR) require(data.table) homeuser = file.path("C:", "Projects", "Books") chap <- "ChapIII" setwd(paste(homeuser, "/FinAnalytics/", chap, sep = "")) # SQL sqlConnection <- "Driver=SQL Server; Server=DATACENTER; Database=Playground; Uid=bmoretz; Pwd=letmein;"; sqlReturnData <- RxSqlServerData( 	connectionString = sqlConnection, 	sqlQuery = sprintf(' 		SELECT 			[tsymbol], 			[ret] 		FROM 			dbo.[msf] 		WHERE 			[date] BETWEEN \'%s\' AND \'%s\'  			AND 			[tsymbol] in (\'%s\', \'%s\' ) 	;', '2005-01-01', '2013-12-31', 'AAPL', 'SPY'), 	stringsAsFactors = FALSE, 	useFastRead = TRUE ) raw.data <- as.data.table(rxImport(sqlReturnData, overwrite = TRUE, stringsAsFactors = FALSE)) y <- raw.data[raw.data$tsymbol == 'AAPL',]$ret x <- raw.data[raw.data$tsymbol == 'SPY',]$ret beta_ratio <- cov(x, y) / var(x) beta_lm <- summary(lm(y ~ x + 1)) shapiro.test(x) shapiro.test(y) plot(x,y)
dt <- read.csv("dt.csv")
getwd()
getwd()
data.file.path <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table")
dt <- read.csv(data.file.path)
dt <- read.csv(data.file.path)
dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table")
setwd(dt.wd)
dt <- read.csv("dt.csv")
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd) DT <- as.data.table( read.csv("dt.csv") )
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd) DT <- as.data.table( read.csv("dt.csv") )
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd)
# load DT DT <- as.data.table( read.csv("dt.csv") )
# Sum of all columns and the number of rows
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
colnames(DT)
DT <- as.data.table( read.csv("dt.csv") )
setNames(DT, c("x", "y", "z") DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
DT <- as.data.table( read.csv("dt.csv") )
setNames(DT, c("x", "y", "z"))
# Sum of all columns and the number of rows
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
DT
t <- read.csv("dt.csv")
t <- read.csv("dt.csv", make.names = FALSE)
t <- read.csv("dt.csv", make.names = TRUE)
t <- read.csv("dt.csv", header = TRUE)
t <- read.csv("dt.csv", header = TRUE, col.names = c("x","y","z") DT <- as.data.table( read.csv("dt.csv", header = TRUE) ) DT <- as.data.table( read.csv("dt.csv", header = TRUE) )
DT <- as.data.table( read.csv("dt.csv", header = TRUE) )
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
setNames(DT, c("x", "y", "z"))
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, lapply(.SD, cumsum), by1 = x, .SDcols = c("x", "y", "z")]
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd)
# load DT DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z"))) setNames(DT, c("x", "y", "z"))
DT # spot check
# Sum of all columns and the number of rows
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd)
# load DT DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
# Sum of all columns and the number of rows
DT[, c(lapply(.SD, sum), .N), by = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, c.( lapply(.SD, cumsum), .N) , by1 = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, c.( lapply(.SD, cumsum), .N) , by = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, c( lapply(.SD, cumsum), .N) , by = x, .SDcols = c("x", "y", "z")]
DT[DT[, z > 8,]][, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y", "z")]
DT[, c(z > 8, lapply(.SD, cumsum)), by = x, .SDcols = c("x", "y", "z")]
DT[, c(by1 = z > 8, lapply(.SD, cumsum)), by = x, .SDcols = c("x", "y", "z")]
DT[, z > 8,][, c(lapply(.SD, cumsum)), by = x, .SDcols = c("x", "y", "z")]
DT[, z > 8,][, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y", "z")]
DT[, z > 8,]
DT[ DT[, z > 8,] ]
DT[, .( g := z > 8),]
DT[, .(g := z > 8),]
DT[, z > 8,][, lapply(.SD, cumsum), by = by1 = x, .SDcols = c("x", "y", "z")]
DT[, lapply(.SD, cumsum), by = by1 = x, .SDcols = c("x", "y", "z")]
DT[, lapply(.SD, cumsum), by = c(by1 = x), .SDcols = c("x", "y", "z")]
DT[, lapply(.SD, cumsum), by = c(by1 = x), .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y")]
DT
DT[, lapply(.SD, cumsum), by = z, .SDcols = c("x", "y")]
DT[, c.( lapply(.SD, cumsum) ), by = z, .SDcols = c("x", "y")]
DT[, c( lapply(.SD, cumsum) ), by = z, .SDcols = c("x", "y")]
DT[, c( lapply(.SD, cumsum) ), by = z, .SDcols = c("x", "y")]
DT[, c( lapply(.SD, cumsum) ), by = x, .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by1 = x, .SDcols = c("x", "y")]
DT[, z > 8]
DT[, z > 8,]
DT[, z > 8]
DT[ DT[, z > 8] ]
DT[DT[, z > 8]][, lapply(.SD, cumsum), by = x, .SDcols = c("x", "y")]
DT[, , by = c(x, z > 8 )]
DT[, , by = list(x, z > 8 )]
DT[, by1 = z > 8,]
DT[, by1 := z > 8,]
DT[, by1 := z > 8,]
DT
DT[, c( by1 = x, by1 := z > 8 ),]
DT[, c( by1 := x, by1 := z > 8 ),]
DT[, c( by1 = x, by1 = z > 8 ),]
DT[, by1 := z > 8, by = x]
DT
DT[, by1 := z > 8,][, lapply(.SD, cumsum), by = c(x, by1), .SDcols = c("x", "y")]
DT[, by1 := z > 8,][, lapply(.SD, cumsum), by = c(x, by1), .SDcols = c("x", "y")]
DT[, by1 := z > 8,][, lapply(.SD, cumsum), by = c("x", "by1"), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("x", "by1") ), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("by1", "by2") ), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("by1", "by2") ), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")]
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
DT[, by2 := z > 8,][, c( by1 = x, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")]
DT
DT[, by2 := z > 8,][, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, .( by1 = x, lapply(.SD, cumsum) ), by = c("x", "by2"), .SDcols = c("x", "y")]
DT[, by2 := z > 8,][, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2)]
DT[, by2 := z > 8,][, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
DT[, lapply(.SD, cumsum), by = c("x", "by2"), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, c( by2 = x > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")]
DT <- as.data.table(read.csv("dt.csv", header = TRUE, col.names = c("x", "y", "z")))
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "by2") ), .SDcols = c("x", "y")]
DT[, c( by2 = z > 8, lapply(.SD, cumsum), by = c("x", "z") ), .SDcols = c("x", "y")][, .( by1 = x, by2, x,y)]
DT[, lapply(.SD, cumsum), by = .(x, z > 8)]
DT[, lapply(.SD, cumsum), by = .(x, z > 8), .SDcols = c("x","y")]
DT[, lapply(.SD, cumsum), by = .(x, z > 8), .SDcols = c("x", "y")][, .(by1 = x, by2, x, y)]
DT[, lapply(.SD, cumsum), by = .(x, z > 8), .SDcols = c("x", "y")][, .(by1 = x, by2 = z, x, y)]
DT[, lapply(.SD, cumsum), by = .(x, by2 = z > 8), .SDcols = c("x", "y")]
DT[, lapply(.SD, cumsum), by = .(by1 = x, by2 = z > 8), .SDcols = c("x", "y")]
require(data.table)
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
DT[, Total := sum(B) ,]
DT[, Total := sum(B) ,]
DT
DT[, B := B + 1,]
DT[2:4, Total2 := sum(B), by = A]
DT
DT[, Total := NULL, ]
DT[, Total := NULL, ]
DT[[3]]
require(data.table) DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5) # Add column by reference: Total
DT[, Total := sum(B), by = A]
# Add 1 to column B
DT[, B := B + 1,]
# Add a new column Total2
DT[2:4, Total2 := sum(B), by = A]
# Remove the Total column
DT[, Total := NULL, ]
# Select the third column using `[[`
DT[[3]]
DT
DT
DT[2:3, B := NULL ]
DT[2:3, B := NULL,]
DT <- data.table(A = c(1, 1, 1, 2, 2), B = 1:5)
DT[, ':='(B = B + 1L, C = A + B, D = 2)]
DT[, my_cols := NULL,]
DT[, .(my_cols := NULL),]
DT[, my_cols := NULL,]
DT[my_cols := NULL]
DT[,my_cols := NULL,]
DT[, B := NULL,]
DT[, ':='(B = B + 1L, C = A + B, D = 2)]
DT <- data.table(A = c(1, 1, 1, 2, 2), B = 1:5)
DT[, ':='(B = B + 1L, C = A + B, D = 2)]
DT[, ':='(my_cols) = NULL,]
DT[, ':='my_cols = NULL,]
DT[, .(my_cols = NULL),]
DT[, .(my_cols = NULL),]
DT[, .(my_cols := NULL),]
DT[ 3 := NULL ]
DT[ DT[,my_cols,] ]
DT[,my_cols,]
my_cols <- c("B", "C")
DT[, .(my_cols := NULL),]
DT[, my_cols := NULL,]
DT[ DT[,my_cols,] ]
DT[[3]] = NULL
DT <- data.table(A = c(1, 1, 1, 2, 2), B = 1:5)
DT[, ':='(B = B + 1L, C = A + B, D = 2)]
# Delete my_cols
my_cols <- c("B", "C")
DT[, my_cols := NULL,]
DT[, .(my_cols := NULL),]
DT[, paste(my_cols) := NULL,]
DT[[2]] = NULL
rep(1,4)
rep(1:3,4)
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd) # load DT DT <- as.data.table(read.csv("dt.csv", header = TRUE))
DT
DT <- as.data.table(read.csv("dt.csv", header = TRUE, check.names = FALSE))
DT
require(data.table) dt.wd <- file.path("C:", "Projects", "R", "Playground", "Scripts", "DataCamp", "data.table") setwd(dt.wd) # load DT DT <- as.data.table(read.csv("dt.csv", header = TRUE, check.names = TRUE)) DT
read.csv("dt.csv", header = TRUE, check.names = TRUE)
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE))
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE))
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE))
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE))
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE, stringsAsFactors = FALSE))
read.csv("dt_2.csv", header = TRUE, check.names = TRUE, stringsAsFactors = FALSE)
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE, stringsAsFactors = FALSE))
DT[X := NULL]
DT[,X := NULL,]
 DT
# Set the seed
set.seed(1)
rnorm(3)
sample(1:3)
sample(1:3)
sample(1:10)
sample(1:length(DT))
for (i in 2:4)
	set(DT, i, sample(1:length(DT[[i]])), NA) 		DT
length(DT[[2]]))
DT[[2]]
length(DT[[2]])
for (i in 2:4)
	set(DT, i, sample(1:length(DT[[2]])), NA)
for (i in 2:4)
	set(DT, i, sample(1:10), NA)
for (i in 2:4)
	set(DT, sample(1:length(DT[[2]])), i, NA) 		DT
DT <- as.data.table(read.csv("dt_2.csv", header = TRUE, check.names = TRUE, stringsAsFactors = FALSE)) DT[, X := NULL,] # For loop with set # Loop through columns 2, 3, and 4, and for each one, select 3 rows at random and set the value of that column to NA. for (i in 2:4)
	set(DT, sample(1:3, length(DT[[2]])), i, NA) 		DT
sample(1:3, 10)
sample(10)
sample(10,3)
for (i in 2:4)
	set(DT, sample(10, 3), i, NA) DT
setnames(DT, tolower)
setnames(DT, tolower(colnames(DT)))
DT
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
paste0(colnames(DT),"_2")
setnames(DT, paste0(colnames(DT),"_2"))
colnames(DT)[1] <- "A2"
colnames(DT) <- rev(colnames(DT))
colnames(DT)[1,] <- "A2"
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
setnames(DT, paste0(colnames(DT),"_2"))
colnames(DT)[1] <- "A2"
colnames(DT) <- rev(colnames(DT))
# Define DT
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
# Add a suffix "_2" to all column names
setnames(DT, paste0(colnames(DT),"_2"))
# Change column name "a_2" to "A2"
colnames(DT)[1] <- "A2"
setorder(DT, rev(colnames(DT)))
setorder(DT, rev(colnames(DT)))
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)
# Add a suffix "_2" to all column names
setnames(DT, paste0(colnames(DT),"_2"))
# Change column name "a_2" to "A2"
colnames(DT)[1] <- "A2"
# Reverse the order of the columns
setorder(DT, rev(colnames(DT)))
rev(colnames(DT))
setcolorder(DT, rev(colnames(DT)))
# Define DT DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1) # Add a suffix "_2" to all column names setnames(DT, paste0(colnames(DT), "_2")) # Change column name "a_2" to "A2" colnames(DT)[1] <- "A2" # Reverse the order of the columns setcolorder(DT, rev(colnames(DT)))

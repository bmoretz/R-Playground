library(Quandl) library(quantmod) setDefaults(getSymbols.yahoo, from = "2016-01-01", to = "2016-12-31") setDefaults(getSymbols.av, api.key = "2W7RF4LLXP5CGY6E") Quandl.api_key("5qmM13nNYrWsCxwsKRn_") # Set the default to pull data from Alpha Vantage setDefaults(getSymbols, src = "av") # Get GOOG data getSymbols(Symbol = 'GOOG', auto.assign = TRUE, api.key = "2W7RF4LLXP5CGY6E") # Verify the data was actually pulled from Alpha Vantage str(GOOG) # Look at getSymbols.yahoo arguments args(getSymbols.yahoo) # Set default 'from' value for getSymbols.yahoo setDefaults(getSymbols.yahoo, from = "2000-01-01") # Confirm defaults were set correctly getDefaults('getSymbols.yahoo')
install.packages("Quandl")
.libPaths(c(.libPaths(), "~/userLibrary"))
.libPaths()
.libPaths()
.libPaths()
install.packages("Quandl")
install.packages("quantmod")
library(Quandl) library(quantmod) setDefaults(getSymbols.yahoo, from = "2016-01-01", to = "2016-12-31") setDefaults(getSymbols.av, api.key = "2W7RF4LLXP5CGY6E") Quandl.api_key("5qmM13nNYrWsCxwsKRn_") # Set the default to pull data from Alpha Vantage setDefaults(getSymbols, src = "av") # Get GOOG data getSymbols(Symbol = 'GOOG', auto.assign = TRUE, api.key = "2W7RF4LLXP5CGY6E") # Verify the data was actually pulled from Alpha Vantage str(GOOG) # Look at getSymbols.yahoo arguments args(getSymbols.yahoo) # Set default 'from' value for getSymbols.yahoo setDefaults(getSymbols.yahoo, from = "2000-01-01") # Confirm defaults were set correctly getDefaults('getSymbols.yahoo')
# Look at the first few rows of CP
head(CP)
# Set the source for CP to FRED
setSymbolLookup(src = "FRED")
# Load CP data again
getSymbols("CP")
# Look at the first few rows of CP
head(CP)
# Set the source for CP to FRED
setSymbolLookup(src = "yahoo")
# Set the source for CP to FRED
setSymbolLookup(src = "FRED")
# Look at the first few rows of CP
head(CP)
# Set the source for CP to FRED
setSymbolLookup(src = "FRED")
# Load CP data again
getSymbols("CP")
# Look at the first few rows of CP
head(CP)
setSymbolLookup
?setSymbolLookup
# Save symbol lookup table
saveSymbolLookup(file = "my_symbol_lookup.rda")
# Set default source for CP to "yahoo"
setSymbolLookup(Symbols = "CP", src = "yahoo")
# Verify the default source is "yahoo"
getSymbolLookup("CP")
# Load symbol lookup table
loadSymbolLookup(file = "my_symbol_lookup.rda")
# Save symbol lookup table
saveSymbolLookup(file = "my_symbol_lookup.rda")
BRK.A <- getSymbols('BRK-A', auto.assign = F)
colnames(BRK.A)
setSymbolLookup(BRK.A = list(name = "BRK-A"))
setSymbolLookup(ATT = list(name = "T"))
getSymbols(c("BRK.A", "ATT"))
# Merge irregular_xts and regular_xts merged_xts <- merge(irregular_xts, regular_xts) # Look at the first few rows of merged_xts head(merged_xts) ##            irregular_xts ## 2016-01-02             4 ## 2016-01-03            NA ## 2016-01-04            NA ## 2016-01-05            21 ## 2016-01-06            NA ## 2016-01-07             1 # Use the fill argument to fill NA with their previous value merged_filled_xts <- merge(irregular_xts, regular_xts, fill = na.locf) # Look at the first few rows of merged_filled_xts head(merged_filled_xts) ##            irregular_xts ## 2016-01-02             4 ## 2016-01-03             4 ## 2016-01-04             4 ## 2016-01-05            21 ## 2016-01-06            21 ## 2016-01-07             1
# Extract the start date of the series start_date <- start(irregular_xts) # Extract the end date of the series end_date <- end(irregular_xts) # Create a regular date-time sequence regular_index <- seq(from = start_date, to = end_date, by = "day") # Create a zero-width xts object regular_xts <- xts(, order.by = regular_index) # Merge irregular_xts and regular_xts merged_xts <- merge(irregular_xts, regular_xts) # Look at the first few rows of merged_xts head(merged_xts) # Use the fill argument to fill NA with their previous value merged_filled_xts <- merge(irregular_xts, regular_xts, fill = na.locf) # Look at the first few rows of merged_filled_xts head(merged_filled_xts) # Aggregate DFF to monthly
monthly_fedfunds <- apply.monthly(DFF, mean)
# Convert index to yearmon
index(monthly_fedfunds) <- as.yearmon(index(monthly_fedfunds))
# Merge FEDFUNDS with the monthly aggregate
merged_fedfunds <- merge(FEDFUNDS, monthly_fedfunds)
# Look at the first few rows of the merged object
head(merged_fedfunds)
# Fill NA forward
merged_fedfunds_locf <- na.locf(merged_fedfunds)
# Extract index values containing last day of month
aligned_last_day <- merged_fedfunds_locf[index(monthly_fedfunds)]
# Fill NA backward
merged_fedfunds_locb <- na.locf(merged_fedfunds, fromLast = TRUE)
# Extract index values containing first day of month
aligned_first_day <- merged_fedfunds_locb[index(FEDFUNDS)]
?merge
getwd()
dir()
dir()
library(Quandl) library(quantmod)
data.path <- "financial.data\05 - Files\data\"
data.path <- "financial.data\\05 - Files\\data\\"
dir(path = data.path)
